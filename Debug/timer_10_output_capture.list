
timer_10_output_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800431c  0800431c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800431c  0800431c  0000531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004324  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  08004380  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004380  000063c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dce6  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001996  00000000  00000000  00013d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00015708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000940  00000000  00000000  000162c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a14  00000000  00000000  00016c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6c2  00000000  00000000  00049614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e274  00000000  00000000  00058cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196f4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  00196f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0019a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080040e8 	.word	0x080040e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080040e8 	.word	0x080040e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SysTick_Handler>:

extern TIM_HandleTypeDef htim10;
extern TIM_HandleTypeDef htim11;
extern TIM_HandleTypeDef htim12;

void SysTick_Handler(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005e4:	f000 fcf2 	bl	8000fcc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005e8:	f000 fe3e 	bl	8001268 <HAL_SYSTICK_IRQHandler>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80005f6:	f001 fe3d 	bl	8002274 <HAL_TIM_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000078 	.word	0x20000078

08000604 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim11);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800060a:	f001 fe33 	bl	8002274 <HAL_TIM_IRQHandler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000c4 	.word	0x200000c4

08000618 <TIM8_BRK_TIM12_IRQHandler>:

void TIM8_BRK_TIM12_IRQHandler(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim12);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800061e:	f001 fe29 	bl	8002274 <HAL_TIM_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000110 	.word	0x20000110

0800062c <main>:

uint32_t ccr_content;

char msg[100];

int main() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
	// Init HAL
	  HAL_Init();
 8000632:	f000 fc8e 	bl	8000f52 <HAL_Init>
	  memset(&htim12, 0, sizeof(htim12));
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	48a6      	ldr	r0, [pc, #664]	@ (80008d4 <main+0x2a8>)
 800063c:	f003 f8cc 	bl	80037d8 <memset>
	  memset(&htim10, 0, sizeof(htim10));
 8000640:	224c      	movs	r2, #76	@ 0x4c
 8000642:	2100      	movs	r1, #0
 8000644:	48a4      	ldr	r0, [pc, #656]	@ (80008d8 <main+0x2ac>)
 8000646:	f003 f8c7 	bl	80037d8 <memset>
	  memset(&htim11, 0, sizeof(htim11));
 800064a:	224c      	movs	r2, #76	@ 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	48a3      	ldr	r0, [pc, #652]	@ (80008dc <main+0x2b0>)
 8000650:	f003 f8c2 	bl	80037d8 <memset>


	  /***********************************************************************
	   ***************             Configure Clock             ***************
	   ***********************************************************************/
	  SystemClock_Config();
 8000654:	f000 f9f0 	bl	8000a38 <SystemClock_Config>


	  /***********************************************************************
	   ***************           Configure BTN GPIO           ****************
	   ***********************************************************************/
	  BTN_GPIO_Init();
 8000658:	f000 faec 	bl	8000c34 <BTN_GPIO_Init>
	  /***********************************************************************
	   ***************             Configure UART6             ***************
	   ***********************************************************************/


	  memset(&huart6, 0, sizeof(huart6));
 800065c:	2288      	movs	r2, #136	@ 0x88
 800065e:	2100      	movs	r1, #0
 8000660:	489f      	ldr	r0, [pc, #636]	@ (80008e0 <main+0x2b4>)
 8000662:	f003 f8b9 	bl	80037d8 <memset>
	  UART6_Init();
 8000666:	f000 fab1 	bl	8000bcc <UART6_Init>

	  memset(msg, 0, strlen(msg));
 800066a:	489e      	ldr	r0, [pc, #632]	@ (80008e4 <main+0x2b8>)
 800066c:	f7ff fde8 	bl	8000240 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	489b      	ldr	r0, [pc, #620]	@ (80008e4 <main+0x2b8>)
 8000678:	f003 f8ae 	bl	80037d8 <memset>
	  sprintf(msg, "\e[1;1H\e[2J");
 800067c:	499a      	ldr	r1, [pc, #616]	@ (80008e8 <main+0x2bc>)
 800067e:	4899      	ldr	r0, [pc, #612]	@ (80008e4 <main+0x2b8>)
 8000680:	f003 f88a 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000684:	4897      	ldr	r0, [pc, #604]	@ (80008e4 <main+0x2b8>)
 8000686:	f7ff fddb 	bl	8000240 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	4994      	ldr	r1, [pc, #592]	@ (80008e4 <main+0x2b8>)
 8000694:	4892      	ldr	r0, [pc, #584]	@ (80008e0 <main+0x2b4>)
 8000696:	f002 fb76 	bl	8002d86 <HAL_UART_Transmit>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0x78>
		Error_Handler();
 80006a0:	f000 fb4c 	bl	8000d3c <Error_Handler>
	  }
	  while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1) == GPIO_PIN_SET);
 80006a4:	bf00      	nop
 80006a6:	2102      	movs	r1, #2
 80006a8:	4890      	ldr	r0, [pc, #576]	@ (80008ec <main+0x2c0>)
 80006aa:	f000 ff97 	bl	80015dc <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d0f8      	beq.n	80006a6 <main+0x7a>
	  memset(msg, 0, strlen(msg));
 80006b4:	488b      	ldr	r0, [pc, #556]	@ (80008e4 <main+0x2b8>)
 80006b6:	f7ff fdc3 	bl	8000240 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	4888      	ldr	r0, [pc, #544]	@ (80008e4 <main+0x2b8>)
 80006c2:	f003 f889 	bl	80037d8 <memset>
	  sprintf(msg, "\nUse the Timer Output Compare Modes to produce the following frequencies:\n");
 80006c6:	498a      	ldr	r1, [pc, #552]	@ (80008f0 <main+0x2c4>)
 80006c8:	4886      	ldr	r0, [pc, #536]	@ (80008e4 <main+0x2b8>)
 80006ca:	f003 f865 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 80006ce:	4885      	ldr	r0, [pc, #532]	@ (80008e4 <main+0x2b8>)
 80006d0:	f7ff fdb6 	bl	8000240 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006dc:	4981      	ldr	r1, [pc, #516]	@ (80008e4 <main+0x2b8>)
 80006de:	4880      	ldr	r0, [pc, #512]	@ (80008e0 <main+0x2b4>)
 80006e0:	f002 fb51 	bl	8002d86 <HAL_UART_Transmit>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <main+0xc2>
		Error_Handler();
 80006ea:	f000 fb27 	bl	8000d3c <Error_Handler>
	  }
	  memset(msg, 0, strlen(msg));
 80006ee:	487d      	ldr	r0, [pc, #500]	@ (80008e4 <main+0x2b8>)
 80006f0:	f7ff fda6 	bl	8000240 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	487a      	ldr	r0, [pc, #488]	@ (80008e4 <main+0x2b8>)
 80006fc:	f003 f86c 	bl	80037d8 <memset>
	  sprintf(msg, "------------------------------------------------------------------\r\n");
 8000700:	497c      	ldr	r1, [pc, #496]	@ (80008f4 <main+0x2c8>)
 8000702:	4878      	ldr	r0, [pc, #480]	@ (80008e4 <main+0x2b8>)
 8000704:	f003 f848 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000708:	4876      	ldr	r0, [pc, #472]	@ (80008e4 <main+0x2b8>)
 800070a:	f7ff fd99 	bl	8000240 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000716:	4973      	ldr	r1, [pc, #460]	@ (80008e4 <main+0x2b8>)
 8000718:	4871      	ldr	r0, [pc, #452]	@ (80008e0 <main+0x2b4>)
 800071a:	f002 fb34 	bl	8002d86 <HAL_UART_Transmit>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <main+0xfc>
		Error_Handler();
 8000724:	f000 fb0a 	bl	8000d3c <Error_Handler>
	  }
	  memset(msg, 0, strlen(msg));
 8000728:	486e      	ldr	r0, [pc, #440]	@ (80008e4 <main+0x2b8>)
 800072a:	f7ff fd89 	bl	8000240 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	486b      	ldr	r0, [pc, #428]	@ (80008e4 <main+0x2b8>)
 8000736:	f003 f84f 	bl	80037d8 <memset>
	  sprintf(msg, "\t500Hz -> TIM12_Channel2\tLogic_Analyzer CH0\n\t1Khz  -> TIM10_Channel1\tLogic_Analyzer CH1\n\t2KHz  -> TIM11_Channel1\tLogic_Analyzer CH2\n\t4Khz  -> TIM12_Channel1\tLogic_Analyzer CH3\n");
 800073a:	496f      	ldr	r1, [pc, #444]	@ (80008f8 <main+0x2cc>)
 800073c:	4869      	ldr	r0, [pc, #420]	@ (80008e4 <main+0x2b8>)
 800073e:	f003 f82b 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000742:	4868      	ldr	r0, [pc, #416]	@ (80008e4 <main+0x2b8>)
 8000744:	f7ff fd7c 	bl	8000240 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000750:	4964      	ldr	r1, [pc, #400]	@ (80008e4 <main+0x2b8>)
 8000752:	4863      	ldr	r0, [pc, #396]	@ (80008e0 <main+0x2b4>)
 8000754:	f002 fb17 	bl	8002d86 <HAL_UART_Transmit>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <main+0x136>
		Error_Handler();
 800075e:	f000 faed 	bl	8000d3c <Error_Handler>
	  }

	  memset(msg, 0, strlen(msg));
 8000762:	4860      	ldr	r0, [pc, #384]	@ (80008e4 <main+0x2b8>)
 8000764:	f7ff fd6c 	bl	8000240 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	485d      	ldr	r0, [pc, #372]	@ (80008e4 <main+0x2b8>)
 8000770:	f003 f832 	bl	80037d8 <memset>
	  sprintf(msg, "==================================================================\r\n");
 8000774:	4961      	ldr	r1, [pc, #388]	@ (80008fc <main+0x2d0>)
 8000776:	485b      	ldr	r0, [pc, #364]	@ (80008e4 <main+0x2b8>)
 8000778:	f003 f80e 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 800077c:	4859      	ldr	r0, [pc, #356]	@ (80008e4 <main+0x2b8>)
 800077e:	f7ff fd5f 	bl	8000240 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800078a:	4956      	ldr	r1, [pc, #344]	@ (80008e4 <main+0x2b8>)
 800078c:	4854      	ldr	r0, [pc, #336]	@ (80008e0 <main+0x2b4>)
 800078e:	f002 fafa 	bl	8002d86 <HAL_UART_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <main+0x170>
		Error_Handler();
 8000798:	f000 fad0 	bl	8000d3c <Error_Handler>
	  }

	  memset(msg, 0, strlen(msg));
 800079c:	4851      	ldr	r0, [pc, #324]	@ (80008e4 <main+0x2b8>)
 800079e:	f7ff fd4f 	bl	8000240 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	484e      	ldr	r0, [pc, #312]	@ (80008e4 <main+0x2b8>)
 80007aa:	f003 f815 	bl	80037d8 <memset>
	  sprintf(msg, "Press the PWR/START button to begin...\n");
 80007ae:	4954      	ldr	r1, [pc, #336]	@ (8000900 <main+0x2d4>)
 80007b0:	484c      	ldr	r0, [pc, #304]	@ (80008e4 <main+0x2b8>)
 80007b2:	f002 fff1 	bl	8003798 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 80007b6:	484b      	ldr	r0, [pc, #300]	@ (80008e4 <main+0x2b8>)
 80007b8:	f7ff fd42 	bl	8000240 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c4:	4947      	ldr	r1, [pc, #284]	@ (80008e4 <main+0x2b8>)
 80007c6:	4846      	ldr	r0, [pc, #280]	@ (80008e0 <main+0x2b4>)
 80007c8:	f002 fadd 	bl	8002d86 <HAL_UART_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x1aa>
		Error_Handler();
 80007d2:	f000 fab3 	bl	8000d3c <Error_Handler>

	  /***********************************************************************
	   ***************             Initialize Timer            ***************
	   ***********************************************************************/
		// Start Timer Peripheral Clock
		__HAL_RCC_TIM10_CLK_ENABLE();
 80007d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000904 <main+0x2d8>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a4a      	ldr	r2, [pc, #296]	@ (8000904 <main+0x2d8>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e2:	4b48      	ldr	r3, [pc, #288]	@ (8000904 <main+0x2d8>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_TIM11_CLK_ENABLE();
 80007ee:	4b45      	ldr	r3, [pc, #276]	@ (8000904 <main+0x2d8>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	4a44      	ldr	r2, [pc, #272]	@ (8000904 <main+0x2d8>)
 80007f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fa:	4b42      	ldr	r3, [pc, #264]	@ (8000904 <main+0x2d8>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000806:	4b3f      	ldr	r3, [pc, #252]	@ (8000904 <main+0x2d8>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a3e      	ldr	r2, [pc, #248]	@ (8000904 <main+0x2d8>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b3c      	ldr	r3, [pc, #240]	@ (8000904 <main+0x2d8>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
	  TIM_TypeDef *timerBaseAddr;
	  uint32_t Channel;
	  memset(&Timer_Init, 0, sizeof(Timer_Init));
 800081e:	2218      	movs	r2, #24
 8000820:	2100      	movs	r1, #0
 8000822:	4839      	ldr	r0, [pc, #228]	@ (8000908 <main+0x2dc>)
 8000824:	f002 ffd8 	bl	80037d8 <memset>
	  Timer_Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b37      	ldr	r3, [pc, #220]	@ (8000908 <main+0x2dc>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
	  Timer_Init.Prescaler = 1;
 800082e:	4b36      	ldr	r3, [pc, #216]	@ (8000908 <main+0x2dc>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
	  Timer_Init.Period = 0xFFFFFFFF;
 8000834:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <main+0x2dc>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800083a:	609a      	str	r2, [r3, #8]

	  /*
	   * Configure TIM Output Compare structure and clear
	   */
	  memset(&sConfig_nonConst12, 0, sizeof(sConfig_nonConst12));
 800083c:	4b33      	ldr	r3, [pc, #204]	@ (800090c <main+0x2e0>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
	  memset(&sConfig_nonConst10, 0, sizeof(sConfig_nonConst10));
 8000842:	4b33      	ldr	r3, [pc, #204]	@ (8000910 <main+0x2e4>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
	  memset(&sConfig_nonConst11, 0, sizeof(sConfig_nonConst11));
 8000848:	4b32      	ldr	r3, [pc, #200]	@ (8000914 <main+0x2e8>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	  sConfig_nonConst12->OCMode = TIM_OCMODE_TOGGLE;
 800084e:	4b2f      	ldr	r3, [pc, #188]	@ (800090c <main+0x2e0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	601a      	str	r2, [r3, #0]
	  sConfig_nonConst12->OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <main+0x2e0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
	  sConfig_nonConst10->OCMode = TIM_OCMODE_TOGGLE;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <main+0x2e4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	601a      	str	r2, [r3, #0]
	  sConfig_nonConst10->OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <main+0x2e4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
	  sConfig_nonConst11->OCMode = TIM_OCMODE_TOGGLE;
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <main+0x2e8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	601a      	str	r2, [r3, #0]
	  sConfig_nonConst11->OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <main+0x2e8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]

	  for(int i = 0; i < 4; i++){
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e074      	b.n	800096e <main+0x342>
		  if(i == 0) {
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d110      	bne.n	80008ac <main+0x280>
			  timerBaseAddr = TIM12;
 800088a:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <main+0x2ec>)
 800088c:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_2;
 800088e:	2304      	movs	r3, #4
 8000890:	613b      	str	r3, [r7, #16]
			  sConfig_nonConst12->Pulse = 25000;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <main+0x2e0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800089a:	605a      	str	r2, [r3, #4]
			  Timer_Config(timerBaseAddr, sConfig_nonConst12, Channel, i);
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <main+0x2e0>)
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	6978      	ldr	r0, [r7, #20]
 80008a6:	f000 f915 	bl	8000ad4 <Timer_Config>
 80008aa:	e05d      	b.n	8000968 <main+0x33c>

		  }
		  else if( i == 1 ) {
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d136      	bne.n	8000920 <main+0x2f4>
			  timerBaseAddr = TIM10;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <main+0x2f0>)
 80008b4:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
			  sConfig_nonConst10->Pulse = 12500;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <main+0x2e4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80008c2:	605a      	str	r2, [r3, #4]
			  Timer_Config(timerBaseAddr, sConfig_nonConst10, Channel, i);
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <main+0x2e4>)
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	6978      	ldr	r0, [r7, #20]
 80008ce:	f000 f901 	bl	8000ad4 <Timer_Config>
 80008d2:	e049      	b.n	8000968 <main+0x33c>
 80008d4:	20000110 	.word	0x20000110
 80008d8:	20000078 	.word	0x20000078
 80008dc:	200000c4 	.word	0x200000c4
 80008e0:	20000180 	.word	0x20000180
 80008e4:	2000020c 	.word	0x2000020c
 80008e8:	08004100 	.word	0x08004100
 80008ec:	40022400 	.word	0x40022400
 80008f0:	0800410c 	.word	0x0800410c
 80008f4:	08004158 	.word	0x08004158
 80008f8:	080041a0 	.word	0x080041a0
 80008fc:	08004254 	.word	0x08004254
 8000900:	0800429c 	.word	0x0800429c
 8000904:	40023800 	.word	0x40023800
 8000908:	20000168 	.word	0x20000168
 800090c:	2000015c 	.word	0x2000015c
 8000910:	20000160 	.word	0x20000160
 8000914:	20000164 	.word	0x20000164
 8000918:	40001800 	.word	0x40001800
 800091c:	40014400 	.word	0x40014400
		  }
		  else if( i == 2 ) {
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d110      	bne.n	8000948 <main+0x31c>
			  timerBaseAddr = TIM11;
 8000926:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <main+0x3ec>)
 8000928:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
			  sConfig_nonConst11->Pulse = 6250;
 800092e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <main+0x3f0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000936:	605a      	str	r2, [r3, #4]
			  Timer_Config(timerBaseAddr, sConfig_nonConst11, Channel, i);
 8000938:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <main+0x3f0>)
 800093a:	6819      	ldr	r1, [r3, #0]
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	6978      	ldr	r0, [r7, #20]
 8000942:	f000 f8c7 	bl	8000ad4 <Timer_Config>
 8000946:	e00f      	b.n	8000968 <main+0x33c>
		  }
		  else {
			  timerBaseAddr = TIM12;
 8000948:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <main+0x3f4>)
 800094a:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
			  sConfig_nonConst12->Pulse = 3125;
 8000950:	4b34      	ldr	r3, [pc, #208]	@ (8000a24 <main+0x3f8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000958:	605a      	str	r2, [r3, #4]
			  Timer_Config(timerBaseAddr, sConfig_nonConst12, Channel, i);
 800095a:	4b32      	ldr	r3, [pc, #200]	@ (8000a24 <main+0x3f8>)
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f000 f8b6 	bl	8000ad4 <Timer_Config>
	  for(int i = 0; i < 4; i++){
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	3301      	adds	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2b03      	cmp	r3, #3
 8000972:	dd87      	ble.n	8000884 <main+0x258>
		  }

	  }
	  uint16_t waitVar = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	837b      	strh	r3, [r7, #26]
	  while(waitVar < 60000) {
 8000978:	e002      	b.n	8000980 <main+0x354>
		  waitVar++;
 800097a:	8b7b      	ldrh	r3, [r7, #26]
 800097c:	3301      	adds	r3, #1
 800097e:	837b      	strh	r3, [r7, #26]
	  while(waitVar < 60000) {
 8000980:	8b7b      	ldrh	r3, [r7, #26]
 8000982:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000986:	4293      	cmp	r3, r2
 8000988:	d9f7      	bls.n	800097a <main+0x34e>
	  }
	  while(waitVar > 0) {
 800098a:	e002      	b.n	8000992 <main+0x366>
		  waitVar--;
 800098c:	8b7b      	ldrh	r3, [r7, #26]
 800098e:	3b01      	subs	r3, #1
 8000990:	837b      	strh	r3, [r7, #26]
	  while(waitVar > 0) {
 8000992:	8b7b      	ldrh	r3, [r7, #26]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f9      	bne.n	800098c <main+0x360>
	  }
	  while(waitVar < 60000) {
 8000998:	e002      	b.n	80009a0 <main+0x374>
		  waitVar++;
 800099a:	8b7b      	ldrh	r3, [r7, #26]
 800099c:	3301      	adds	r3, #1
 800099e:	837b      	strh	r3, [r7, #26]
	  while(waitVar < 60000) {
 80009a0:	8b7b      	ldrh	r3, [r7, #26]
 80009a2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d9f7      	bls.n	800099a <main+0x36e>
	  }
	  while(waitVar > 0) {
 80009aa:	e002      	b.n	80009b2 <main+0x386>
		  waitVar--;
 80009ac:	8b7b      	ldrh	r3, [r7, #26]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	837b      	strh	r3, [r7, #26]
	  while(waitVar > 0) {
 80009b2:	8b7b      	ldrh	r3, [r7, #26]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f9      	bne.n	80009ac <main+0x380>
	  }


	  while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1) == GPIO_PIN_SET);
 80009b8:	bf00      	nop
 80009ba:	2102      	movs	r1, #2
 80009bc:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <main+0x3fc>)
 80009be:	f000 fe0d 	bl	80015dc <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d0f8      	beq.n	80009ba <main+0x38e>

	  /***********************************************************************
	   ***************               Start Timer               ***************
	   ***********************************************************************/
	  if (HAL_TIM_OC_Start_IT(&htim12, TIM_CHANNEL_2) != HAL_OK) {
 80009c8:	2104      	movs	r1, #4
 80009ca:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <main+0x400>)
 80009cc:	f001 fb0a 	bl	8001fe4 <HAL_TIM_OC_Start_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <main+0x3ae>
		  Error_Handler();
 80009d6:	f000 f9b1 	bl	8000d3c <Error_Handler>
	  }

	  if (HAL_TIM_OC_Start_IT(&htim10, TIM_CHANNEL_1) != HAL_OK) {
 80009da:	2100      	movs	r1, #0
 80009dc:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <main+0x404>)
 80009de:	f001 fb01 	bl	8001fe4 <HAL_TIM_OC_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <main+0x3c0>
		  Error_Handler();
 80009e8:	f000 f9a8 	bl	8000d3c <Error_Handler>
	  }

	  if (HAL_TIM_OC_Start_IT(&htim11, TIM_CHANNEL_1) != HAL_OK) {
 80009ec:	2100      	movs	r1, #0
 80009ee:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <main+0x408>)
 80009f0:	f001 faf8 	bl	8001fe4 <HAL_TIM_OC_Start_IT>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <main+0x3d2>
		  Error_Handler();
 80009fa:	f000 f99f 	bl	8000d3c <Error_Handler>
	  }

	  if (HAL_TIM_OC_Start_IT(&htim12, TIM_CHANNEL_1) != HAL_OK) {
 80009fe:	2100      	movs	r1, #0
 8000a00:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <main+0x400>)
 8000a02:	f001 faef 	bl	8001fe4 <HAL_TIM_OC_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <main+0x3e6>
		  Error_Handler();
 8000a0c:	f000 f996 	bl	8000d3c <Error_Handler>
	  }

	  while(1);
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <main+0x3e6>
 8000a16:	bf00      	nop
 8000a18:	40014800 	.word	0x40014800
 8000a1c:	20000164 	.word	0x20000164
 8000a20:	40001800 	.word	0x40001800
 8000a24:	2000015c 	.word	0x2000015c
 8000a28:	40022400 	.word	0x40022400
 8000a2c:	20000110 	.word	0x20000110
 8000a30:	20000078 	.word	0x20000078
 8000a34:	200000c4 	.word	0x200000c4

08000a38 <SystemClock_Config>:

	return 0;
}


void SystemClock_Config(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	@ 0x48
 8000a3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef  oscInit;
	RCC_ClkInitTypeDef  clkInit;

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	617b      	str	r3, [r7, #20]
	oscInit.HSEState = RCC_HSE_BYPASS;
 8000a42:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a46:	61bb      	str	r3, [r7, #24]
	oscInit.LSEState = RCC_LSE_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
	oscInit.PLL.PLLM = 19;
 8000a52:	2313      	movs	r3, #19
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
	oscInit.PLL.PLLN = 152;
 8000a56:	2398      	movs	r3, #152	@ 0x98
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
	oscInit.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(HAL_RCC_OscConfig(&oscInit) != HAL_OK) {
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fdd0 	bl	800160c <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x3e>
		Error_Handler();
 8000a72:	f000 f963 	bl	8000d3c <Error_Handler>
	}

	clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a76:	230f      	movs	r3, #15
 8000a78:	603b      	str	r3, [r7, #0]
	clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
	clkInit.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	60bb      	str	r3, [r7, #8]
	clkInit.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
	clkInit.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
	if( HAL_RCC_ClockConfig(&clkInit, FLASH_ACR_LATENCY_1WS) != HAL_OK) {
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f86a 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x66>
		Error_Handler();
 8000a9a:	f000 f94f 	bl	8000d3c <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE(); // Turn off the HSI to save power now
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <SystemClock_Config+0x94>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <SystemClock_Config+0x94>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6013      	str	r3, [r2, #0]

	// Reconfigure Systick now to work withe the new System Clock Frequency
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000aaa:	f001 fa0f 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <SystemClock_Config+0x98>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fbac 	bl	8001216 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f000 fbb6 	bl	8001230 <HAL_SYSTICK_CLKSourceConfig>

}
 8000ac4:	bf00      	nop
 8000ac6:	3748      	adds	r7, #72	@ 0x48
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	10624dd3 	.word	0x10624dd3

08000ad4 <Timer_Config>:

void Timer_Config(TIM_TypeDef *Instance, TIM_OC_InitTypeDef *sConfig_nonConst, uint32_t Channel, int i) {
 8000ad4:	b5b0      	push	{r4, r5, r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]

	if(i == 0 || i == 3) {
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <Timer_Config+0x1a>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d11f      	bne.n	8000b2e <Timer_Config+0x5a>
		htim12.Instance = Instance;
 8000aee:	4a33      	ldr	r2, [pc, #204]	@ (8000bbc <Timer_Config+0xe8>)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6013      	str	r3, [r2, #0]
		htim12.Init = Timer_Init;
 8000af4:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <Timer_Config+0xe8>)
 8000af6:	4a32      	ldr	r2, [pc, #200]	@ (8000bc0 <Timer_Config+0xec>)
 8000af8:	1d1c      	adds	r4, r3, #4
 8000afa:	4615      	mov	r5, r2
 8000afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b04:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_OC_Init(&htim12) != HAL_OK) {
 8000b08:	482c      	ldr	r0, [pc, #176]	@ (8000bbc <Timer_Config+0xe8>)
 8000b0a:	f001 fa13 	bl	8001f34 <HAL_TIM_OC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <Timer_Config+0x44>
			Error_Handler();
 8000b14:	f000 f912 	bl	8000d3c <Error_Handler>
		};
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_OC_ConfigChannel(&htim12, sConfig_nonConst, Channel) != HAL_OK) {
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	68b9      	ldr	r1, [r7, #8]
 8000b1c:	4827      	ldr	r0, [pc, #156]	@ (8000bbc <Timer_Config+0xe8>)
 8000b1e:	f001 fcb1 	bl	8002484 <HAL_TIM_OC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d045      	beq.n	8000bb4 <Timer_Config+0xe0>
				Error_Handler();
 8000b28:	f000 f908 	bl	8000d3c <Error_Handler>
			if(HAL_TIM_OC_ConfigChannel(&htim12, sConfig_nonConst, Channel) != HAL_OK) {
 8000b2c:	e042      	b.n	8000bb4 <Timer_Config+0xe0>
			};
	}
	else if(i == 1) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d11f      	bne.n	8000b74 <Timer_Config+0xa0>
		htim10.Instance = Instance;
 8000b34:	4a23      	ldr	r2, [pc, #140]	@ (8000bc4 <Timer_Config+0xf0>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6013      	str	r3, [r2, #0]
		htim10.Init = Timer_Init;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <Timer_Config+0xf0>)
 8000b3c:	4a20      	ldr	r2, [pc, #128]	@ (8000bc0 <Timer_Config+0xec>)
 8000b3e:	1d1c      	adds	r4, r3, #4
 8000b40:	4615      	mov	r5, r2
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b4a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_OC_Init(&htim10) != HAL_OK) {
 8000b4e:	481d      	ldr	r0, [pc, #116]	@ (8000bc4 <Timer_Config+0xf0>)
 8000b50:	f001 f9f0 	bl	8001f34 <HAL_TIM_OC_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <Timer_Config+0x8a>
			Error_Handler();
 8000b5a:	f000 f8ef 	bl	8000d3c <Error_Handler>
		};
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_OC_ConfigChannel(&htim10, sConfig_nonConst, Channel) != HAL_OK) {
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <Timer_Config+0xf0>)
 8000b64:	f001 fc8e 	bl	8002484 <HAL_TIM_OC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d022      	beq.n	8000bb4 <Timer_Config+0xe0>
				Error_Handler();
 8000b6e:	f000 f8e5 	bl	8000d3c <Error_Handler>
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_OC_ConfigChannel(&htim11, sConfig_nonConst, Channel) != HAL_OK) {
				Error_Handler();
			};
	}
}
 8000b72:	e01f      	b.n	8000bb4 <Timer_Config+0xe0>
		htim11.Instance = Instance;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <Timer_Config+0xf4>)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6013      	str	r3, [r2, #0]
		htim11.Init = Timer_Init;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <Timer_Config+0xf4>)
 8000b7c:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <Timer_Config+0xec>)
 8000b7e:	1d1c      	adds	r4, r3, #4
 8000b80:	4615      	mov	r5, r2
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b8a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <Timer_Config+0xf4>)
 8000b90:	f001 f9d0 	bl	8001f34 <HAL_TIM_OC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <Timer_Config+0xca>
			Error_Handler();
 8000b9a:	f000 f8cf 	bl	8000d3c <Error_Handler>
			if(HAL_TIM_OC_ConfigChannel(&htim11, sConfig_nonConst, Channel) != HAL_OK) {
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <Timer_Config+0xf4>)
 8000ba4:	f001 fc6e 	bl	8002484 <HAL_TIM_OC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <Timer_Config+0xe0>
				Error_Handler();
 8000bae:	f000 f8c5 	bl	8000d3c <Error_Handler>
}
 8000bb2:	e7ff      	b.n	8000bb4 <Timer_Config+0xe0>
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbc:	20000110 	.word	0x20000110
 8000bc0:	20000168 	.word	0x20000168
 8000bc4:	20000078 	.word	0x20000078
 8000bc8:	200000c4 	.word	0x200000c4

08000bcc <UART6_Init>:

void UART6_Init() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	// Start USART6 Clock
	__HAL_RCC_USART6_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <UART6_Init+0x5c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <UART6_Init+0x5c>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <UART6_Init+0x5c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

	// Initialize USART6 Handle
	huart6.Instance = USART6;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <UART6_Init+0x60>)
 8000bec:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <UART6_Init+0x64>)
 8000bee:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <UART6_Init+0x60>)
 8000bf2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf6:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <UART6_Init+0x60>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <UART6_Init+0x60>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
	huart6.Init.Mode = UART_MODE_TX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <UART6_Init+0x60>)
 8000c06:	2208      	movs	r2, #8
 8000c08:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <UART6_Init+0x60>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&huart6) != HAL_OK) {
 8000c10:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <UART6_Init+0x60>)
 8000c12:	f002 f86a 	bl	8002cea <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <UART6_Init+0x54>
		Error_Handler();
 8000c1c:	f000 f88e 	bl	8000d3c <Error_Handler>
	}
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	20000180 	.word	0x20000180
 8000c30:	40011400 	.word	0x40011400

08000c34 <BTN_GPIO_Init>:

void BTN_GPIO_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <BTN_GPIO_Init+0x4c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <BTN_GPIO_Init+0x4c>)
 8000c40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <BTN_GPIO_Init+0x4c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpioJ_Init;
	memset(&gpioJ_Init, 0, sizeof(gpioJ_Init));
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2214      	movs	r2, #20
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fdbd 	bl	80037d8 <memset>
	gpioJ_Init.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
	gpioJ_Init.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
	gpioJ_Init.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
	gpioJ_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOJ, &gpioJ_Init);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <BTN_GPIO_Init+0x50>)
 8000c74:	f000 fb06 	bl	8001284 <HAL_GPIO_Init>

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40022400 	.word	0x40022400

08000c88 <HAL_TIM_OC_DelayElapsedCallback>:
		Error_Handler();
	  }
}


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10f      	bne.n	8000cba <HAL_TIM_OC_DelayElapsedCallback+0x32>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f001 fc6b 	bl	8002578 <HAL_TIM_ReadCapturedValue>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000ca6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + 12500);
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000caa:	6819      	ldr	r1, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	f243 03d4 	movw	r3, #12500	@ 0x30d4
 8000cb4:	440b      	add	r3, r1
 8000cb6:	6353      	str	r3, [r2, #52]	@ 0x34
		else {
			ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content + 25000);
		}
	}
}
 8000cb8:	e036      	b.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
	else if(htim->Instance == TIM11) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f001 fc56 	bl	8002578 <HAL_TIM_ReadCapturedValue>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000cd0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + 6250);
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f641 036a 	movw	r3, #6250	@ 0x186a
 8000cde:	440b      	add	r3, r1
 8000ce0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000ce2:	e021      	b.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7f1b      	ldrb	r3, [r3, #28]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10e      	bne.n	8000d0a <HAL_TIM_OC_DelayElapsedCallback+0x82>
			ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f001 fc42 	bl	8002578 <HAL_TIM_ReadCapturedValue>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000cf8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + 3125);
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f602 4235 	addw	r2, r2, #3125	@ 0xc35
 8000d06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d08:	e00e      	b.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
			ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f001 fc33 	bl	8002578 <HAL_TIM_ReadCapturedValue>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000d16:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content + 25000);
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000d1a:	6819      	ldr	r1, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8000d24:	440b      	add	r3, r1
 8000d26:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40014400 	.word	0x40014400
 8000d34:	20000208 	.word	0x20000208
 8000d38:	40014800 	.word	0x40014800

08000d3c <Error_Handler>:


void Error_Handler(void) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	while(1);
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x4>

08000d44 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	// Perform the low level processor specific inits here using processor specific API's provided by the Cube HAL layer in Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_cortex.c
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 fa2f 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0x7 << 16);
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <HAL_MspInit+0x40>)
 8000d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d52:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <HAL_MspInit+0x40>)
 8000d54:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000d58:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure the prority for the system
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f06f 000b 	mvn.w	r0, #11
 8000d62:	f000 fa2e 	bl	80011c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f06f 000a 	mvn.w	r0, #10
 8000d6e:	f000 fa28 	bl	80011c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	f06f 0009 	mvn.w	r0, #9
 8000d7a:	f000 fa22 	bl	80011c2 <HAL_NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	// Start GPIOC Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_UART_MspInit+0x40>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <HAL_UART_MspInit+0x40>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_UART_MspInit+0x40>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_uart_init;
	gpio_uart_init.Pin = GPIO_PIN_6;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	60fb      	str	r3, [r7, #12]
	gpio_uart_init.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
	gpio_uart_init.Alternate = GPIO_AF8_USART6;
 8000db0:	2308      	movs	r3, #8
 8000db2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpio_uart_init);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <HAL_UART_MspInit+0x44>)
 8000dbc:	f000 fa62 	bl	8001284 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020800 	.word	0x40020800

08000dd0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	 */

	/***********************************************************************
	 ***************          Configure All GPIOCLK          ***************
	 ***********************************************************************/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de4:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000df0:	4b36      	ldr	r3, [pc, #216]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	4a35      	ldr	r2, [pc, #212]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e08:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <HAL_TIM_OC_MspInit+0xfc>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	GPIO_InitTypeDef GPIO_Init;
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2214      	movs	r2, #20
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fcd5 	bl	80037d8 <memset>
	GPIO_Init.Pin = GPIO_PIN_15;
 8000e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e32:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = GPIO_AF9_TIM12;
 8000e38:	2309      	movs	r3, #9
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <HAL_TIM_OC_MspInit+0x100>)
 8000e44:	f000 fa1e 	bl	8001284 <HAL_GPIO_Init>
	 ***********************************************************************/

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2214      	movs	r2, #20
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fcc1 	bl	80037d8 <memset>
	GPIO_Init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = GPIO_AF3_TIM10 | GPIO_AF3_TIM11;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	481a      	ldr	r0, [pc, #104]	@ (8000ed4 <HAL_TIM_OC_MspInit+0x104>)
 8000e6a:	f000 fa0b 	bl	8001284 <HAL_GPIO_Init>
	 ***********************************************************************/

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2214      	movs	r2, #20
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fcae 	bl	80037d8 <memset>
	GPIO_Init.Pin = GPIO_PIN_6;
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = GPIO_AF9_TIM12;
 8000e84:	2309      	movs	r3, #9
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <HAL_TIM_OC_MspInit+0x108>)
 8000e90:	f000 f9f8 	bl	8001284 <HAL_GPIO_Init>

	/***********************************************************************
	 ***************           Set and Enable IRQ's          ***************
	 ***********************************************************************/
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 2);
 8000e94:	2202      	movs	r2, #2
 8000e96:	210f      	movs	r1, #15
 8000e98:	2019      	movs	r0, #25
 8000e9a:	f000 f992 	bl	80011c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e9e:	2019      	movs	r0, #25
 8000ea0:	f000 f9ab 	bl	80011fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	201a      	movs	r0, #26
 8000eaa:	f000 f98a 	bl	80011c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000eae:	201a      	movs	r0, #26
 8000eb0:	f000 f9a3 	bl	80011fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 15, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	202b      	movs	r0, #43	@ 0x2b
 8000eba:	f000 f982 	bl	80011c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000ebe:	202b      	movs	r0, #43	@ 0x2b
 8000ec0:	f000 f99b 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021c00 	.word	0x40021c00

08000edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 fc5b 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb7b 	bl	800062c <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f44:	08004324 	.word	0x08004324
  ldr r2, =_sbss
 8000f48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f4c:	200003c0 	.word	0x200003c0

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>

08000f52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f928 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f000 f805 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff feef 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f943 	bl	8001216 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa8:	f000 f90b 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000270 	.word	0x20000270

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000270 	.word	0x20000270

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <__NVIC_SetPriorityGrouping+0x40>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	4313      	orrs	r3, r2
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	@ (800104c <__NVIC_SetPriorityGrouping+0x40>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	05fa0000 	.word	0x05fa0000

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	@ (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d106      	bne.n	800124c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800124a:	e005      	b.n	8001258 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001252:	f023 0304 	bic.w	r3, r3, #4
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800126c:	f000 f802 	bl	8001274 <HAL_SYSTICK_Callback>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e175      	b.n	8001590 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8164 	bne.w	800158a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x56>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80be 	beq.w	800158a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b66      	ldr	r3, [pc, #408]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a65      	ldr	r2, [pc, #404]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b63      	ldr	r3, [pc, #396]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001426:	4a61      	ldr	r2, [pc, #388]	@ (80015ac <HAL_GPIO_Init+0x328>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a58      	ldr	r2, [pc, #352]	@ (80015b0 <HAL_GPIO_Init+0x32c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d037      	beq.n	80014c2 <HAL_GPIO_Init+0x23e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a57      	ldr	r2, [pc, #348]	@ (80015b4 <HAL_GPIO_Init+0x330>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d031      	beq.n	80014be <HAL_GPIO_Init+0x23a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a56      	ldr	r2, [pc, #344]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d02b      	beq.n	80014ba <HAL_GPIO_Init+0x236>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a55      	ldr	r2, [pc, #340]	@ (80015bc <HAL_GPIO_Init+0x338>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x232>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a54      	ldr	r2, [pc, #336]	@ (80015c0 <HAL_GPIO_Init+0x33c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x22e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a53      	ldr	r2, [pc, #332]	@ (80015c4 <HAL_GPIO_Init+0x340>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x22a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a52      	ldr	r2, [pc, #328]	@ (80015c8 <HAL_GPIO_Init+0x344>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a51      	ldr	r2, [pc, #324]	@ (80015cc <HAL_GPIO_Init+0x348>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a50      	ldr	r2, [pc, #320]	@ (80015d0 <HAL_GPIO_Init+0x34c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4f      	ldr	r2, [pc, #316]	@ (80015d4 <HAL_GPIO_Init+0x350>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x21a>
 800149a:	2309      	movs	r3, #9
 800149c:	e012      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 800149e:	230a      	movs	r3, #10
 80014a0:	e010      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014a2:	2308      	movs	r3, #8
 80014a4:	e00e      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014aa:	2306      	movs	r3, #6
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x240>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	@ (80015ac <HAL_GPIO_Init+0x328>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a29      	ldr	r2, [pc, #164]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_GPIO_Init+0x354>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f ae86 	bls.w	80012a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	40022000 	.word	0x40022000
 80015d4:	40022400 	.word	0x40022400
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e29b      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8087 	beq.w	800173e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b96      	ldr	r3, [pc, #600]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d00c      	beq.n	8001656 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163c:	4b93      	ldr	r3, [pc, #588]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d112      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
 8001648:	4b90      	ldr	r3, [pc, #576]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001650:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b8d      	ldr	r3, [pc, #564]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06c      	beq.n	800173c <HAL_RCC_OscConfig+0x130>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d168      	bne.n	800173c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e275      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x7a>
 8001678:	4b84      	ldr	r3, [pc, #528]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a83      	ldr	r2, [pc, #524]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x9c>
 800168e:	4b7f      	ldr	r3, [pc, #508]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7c      	ldr	r3, [pc, #496]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7b      	ldr	r2, [pc, #492]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a75      	ldr	r2, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b73      	ldr	r3, [pc, #460]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a72      	ldr	r2, [pc, #456]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016cc:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b6c      	ldr	r3, [pc, #432]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6b      	ldr	r2, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc82 	bl	8000ff4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc7e 	bl	8000ff4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e229      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b61      	ldr	r3, [pc, #388]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fc6e 	bl	8000ff4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc6a 	bl	8000ff4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e215      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b57      	ldr	r3, [pc, #348]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x110>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d069      	beq.n	800181e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	4b50      	ldr	r3, [pc, #320]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b4d      	ldr	r3, [pc, #308]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x190>
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x17a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1e9      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	493d      	ldr	r1, [pc, #244]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e040      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d023      	beq.n	80017ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a38      	ldr	r2, [pc, #224]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fc20 	bl	8000ff4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc1c 	bl	8000ff4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1c7      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4929      	ldr	r1, [pc, #164]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbfc 	bl	8000ff4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fbf8 	bl	8000ff4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1a3      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d038      	beq.n	800189c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001836:	4a15      	ldr	r2, [pc, #84]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fbd9 	bl	8000ff4 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fbd5 	bl	8000ff4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e180      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x23a>
 8001864:	e01a      	b.n	800189c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186a:	4a08      	ldr	r2, [pc, #32]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fbbf 	bl	8000ff4 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fbbb 	bl	8000ff4 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d903      	bls.n	8001890 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e166      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
 800188c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a4 	beq.w	80019f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b8c      	ldr	r3, [pc, #560]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b89      	ldr	r3, [pc, #548]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a88      	ldr	r2, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b86      	ldr	r3, [pc, #536]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b83      	ldr	r3, [pc, #524]	@ (8001ae0 <HAL_RCC_OscConfig+0x4d4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d118      	bne.n	8001910 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018de:	4b80      	ldr	r3, [pc, #512]	@ (8001ae0 <HAL_RCC_OscConfig+0x4d4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x4d4>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb83 	bl	8000ff4 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7ff fb7f 	bl	8000ff4 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	@ 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e12a      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x4d4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x31a>
 8001918:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191c:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	@ 0x70
 8001924:	e02d      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x33c>
 800192e:	4b6b      	ldr	r3, [pc, #428]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001932:	4a6a      	ldr	r2, [pc, #424]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	@ 0x70
 800193a:	4b68      	ldr	r3, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	4a67      	ldr	r2, [pc, #412]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6713      	str	r3, [r2, #112]	@ 0x70
 8001946:	e01c      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x35e>
 8001950:	4b62      	ldr	r3, [pc, #392]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001954:	4a61      	ldr	r2, [pc, #388]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6713      	str	r3, [r2, #112]	@ 0x70
 800195c:	4b5f      	ldr	r3, [pc, #380]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a5e      	ldr	r2, [pc, #376]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
 800196a:	4b5c      	ldr	r3, [pc, #368]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	4a5b      	ldr	r2, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6713      	str	r3, [r2, #112]	@ 0x70
 8001976:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	4a58      	ldr	r2, [pc, #352]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff fb33 	bl	8000ff4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff fb2f 	bl	8000ff4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ee      	beq.n	8001992 <HAL_RCC_OscConfig+0x386>
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb1d 	bl	8000ff4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fb19 	bl	8000ff4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0c2      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ee      	bne.n	80019be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a3c      	ldr	r2, [pc, #240]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80ae 	beq.w	8001b58 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d06d      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d14b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff faea 	bl	8000ff4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fae6 	bl	8000ff4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e091      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	019b      	lsls	r3, r3, #6
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	071b      	lsls	r3, r3, #28
 8001a6e:	491b      	ldr	r1, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fab8 	bl	8000ff4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fab4 	bl	8000ff4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e05f      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x47c>
 8001aa6:	e057      	b.n	8001b58 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fa9e 	bl	8000ff4 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fa9a 	bl	8000ff4 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e045      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x4b0>
 8001ada:	e03d      	b.n	8001b58 <HAL_RCC_OscConfig+0x54c>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_RCC_OscConfig+0x558>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d030      	beq.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d129      	bne.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d122      	bne.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d119      	bne.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10f      	bne.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d0      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	4965      	ldr	r1, [pc, #404]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e073      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06b      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4936      	ldr	r1, [pc, #216]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c5c:	f7ff f9ca 	bl	8000ff4 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7ff f9c6 	bl	8000ff4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e053      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d210      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 020f 	bic.w	r2, r3, #15
 8001ca2:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x1cc>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1d0>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1d4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f926 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	080042c8 	.word	0x080042c8
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b090      	sub	sp, #64	@ 0x40
 8001d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d58:	4b59      	ldr	r3, [pc, #356]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x40>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f200 80a1 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x16c>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	e09b      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d78:	e09b      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d7e:	e098      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d028      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001da8:	2100      	movs	r1, #0
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dac:	fb03 f201 	mul.w	r2, r3, r1
 8001db0:	2300      	movs	r3, #0
 8001db2:	fb00 f303 	mul.w	r3, r0, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	4a43      	ldr	r2, [pc, #268]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dba:	fba0 1202 	umull	r1, r2, r0, r2
 8001dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dc6:	4413      	add	r3, r2
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	61fa      	str	r2, [r7, #28]
 8001dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dda:	f7fe fa89 	bl	80002f0 <__aeabi_uldivmod>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4613      	mov	r3, r2
 8001de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de6:	e053      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de8:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	2200      	movs	r2, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dfa:	f04f 0b00 	mov.w	fp, #0
 8001dfe:	4652      	mov	r2, sl
 8001e00:	465b      	mov	r3, fp
 8001e02:	f04f 0000 	mov.w	r0, #0
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	0159      	lsls	r1, r3, #5
 8001e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e10:	0150      	lsls	r0, r2, #5
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	ebb2 080a 	subs.w	r8, r2, sl
 8001e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e32:	ebb2 0408 	subs.w	r4, r2, r8
 8001e36:	eb63 0509 	sbc.w	r5, r3, r9
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	00eb      	lsls	r3, r5, #3
 8001e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e48:	00e2      	lsls	r2, r4, #3
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	eb14 030a 	adds.w	r3, r4, sl
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	eb45 030b 	adc.w	r3, r5, fp
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e66:	4629      	mov	r1, r5
 8001e68:	028b      	lsls	r3, r1, #10
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e70:	4621      	mov	r1, r4
 8001e72:	028a      	lsls	r2, r1, #10
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	60fa      	str	r2, [r7, #12]
 8001e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e84:	f7fe fa34 	bl	80002f0 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3740      	adds	r7, #64	@ 0x40
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	017d7840 	.word	0x017d7840

08001ecc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	080042d8 	.word	0x080042d8

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f10:	f7ff ffdc 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0b5b      	lsrs	r3, r3, #13
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080042d8 	.word	0x080042d8

08001f34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e049      	b.n	8001fda <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe ff38 	bl	8000dd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fb6c 	bl	8002650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_TIM_OC_Start_IT+0x28>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e03c      	b.n	8002086 <HAL_TIM_OC_Start_IT+0xa2>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b04      	cmp	r3, #4
 8002010:	d109      	bne.n	8002026 <HAL_TIM_OC_Start_IT+0x42>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	e02f      	b.n	8002086 <HAL_TIM_OC_Start_IT+0xa2>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d109      	bne.n	8002040 <HAL_TIM_OC_Start_IT+0x5c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e022      	b.n	8002086 <HAL_TIM_OC_Start_IT+0xa2>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d109      	bne.n	800205a <HAL_TIM_OC_Start_IT+0x76>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e015      	b.n	8002086 <HAL_TIM_OC_Start_IT+0xa2>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b10      	cmp	r3, #16
 800205e:	d109      	bne.n	8002074 <HAL_TIM_OC_Start_IT+0x90>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e008      	b.n	8002086 <HAL_TIM_OC_Start_IT+0xa2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0dd      	b.n	800224a <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d104      	bne.n	800209e <HAL_TIM_OC_Start_IT+0xba>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800209c:	e023      	b.n	80020e6 <HAL_TIM_OC_Start_IT+0x102>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d104      	bne.n	80020ae <HAL_TIM_OC_Start_IT+0xca>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020ac:	e01b      	b.n	80020e6 <HAL_TIM_OC_Start_IT+0x102>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d104      	bne.n	80020be <HAL_TIM_OC_Start_IT+0xda>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020bc:	e013      	b.n	80020e6 <HAL_TIM_OC_Start_IT+0x102>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d104      	bne.n	80020ce <HAL_TIM_OC_Start_IT+0xea>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020cc:	e00b      	b.n	80020e6 <HAL_TIM_OC_Start_IT+0x102>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d104      	bne.n	80020de <HAL_TIM_OC_Start_IT+0xfa>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020dc:	e003      	b.n	80020e6 <HAL_TIM_OC_Start_IT+0x102>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d841      	bhi.n	8002170 <HAL_TIM_OC_Start_IT+0x18c>
 80020ec:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <HAL_TIM_OC_Start_IT+0x110>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002129 	.word	0x08002129
 80020f8:	08002171 	.word	0x08002171
 80020fc:	08002171 	.word	0x08002171
 8002100:	08002171 	.word	0x08002171
 8002104:	0800213b 	.word	0x0800213b
 8002108:	08002171 	.word	0x08002171
 800210c:	08002171 	.word	0x08002171
 8002110:	08002171 	.word	0x08002171
 8002114:	0800214d 	.word	0x0800214d
 8002118:	08002171 	.word	0x08002171
 800211c:	08002171 	.word	0x08002171
 8002120:	08002171 	.word	0x08002171
 8002124:	0800215f 	.word	0x0800215f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0202 	orr.w	r2, r2, #2
 8002136:	60da      	str	r2, [r3, #12]
      break;
 8002138:	e01d      	b.n	8002176 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0204 	orr.w	r2, r2, #4
 8002148:	60da      	str	r2, [r3, #12]
      break;
 800214a:	e014      	b.n	8002176 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0208 	orr.w	r2, r2, #8
 800215a:	60da      	str	r2, [r3, #12]
      break;
 800215c:	e00b      	b.n	8002176 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	60da      	str	r2, [r3, #12]
      break;
 800216e:	e002      	b.n	8002176 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	bf00      	nop
  }

  if (status == HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d165      	bne.n	8002248 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fd6d 	bl	8002c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <HAL_TIM_OC_Start_IT+0x270>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_OC_Start_IT+0x1ba>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <HAL_TIM_OC_Start_IT+0x274>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_OC_Start_IT+0x1be>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_TIM_OC_Start_IT+0x1c0>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_TIM_OC_Start_IT+0x270>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d022      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ca:	d01d      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_TIM_OC_Start_IT+0x278>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d018      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_TIM_OC_Start_IT+0x27c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_TIM_OC_Start_IT+0x280>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00e      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_TIM_OC_Start_IT+0x274>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <HAL_TIM_OC_Start_IT+0x284>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_OC_Start_IT+0x224>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <HAL_TIM_OC_Start_IT+0x288>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d115      	bne.n	8002234 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_TIM_OC_Start_IT+0x28c>)
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d015      	beq.n	8002246 <HAL_TIM_OC_Start_IT+0x262>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d011      	beq.n	8002246 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	e008      	b.n	8002246 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e000      	b.n	8002248 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40010400 	.word	0x40010400
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40014000 	.word	0x40014000
 800226c:	40001800 	.word	0x40001800
 8002270:	00010007 	.word	0x00010007

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0202 	mvn.w	r2, #2
 80022a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9a8 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fcde 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f9ab 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f982 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fcb8 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f985 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d020      	beq.n	8002370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f95c 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fc92 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f95f 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d020      	beq.n	80023bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0210 	mvn.w	r2, #16
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2208      	movs	r2, #8
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f936 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fc6c 	bl	8000c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f939 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0201 	mvn.w	r2, #1
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f910 	bl	8002600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00c      	beq.n	800240e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fc5a 	bl	8002cc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00c      	beq.n	8002432 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800242a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fc52 	bl	8002cd6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8f3 	bl	800263c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0220 	mvn.w	r2, #32
 8002472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fc1a 	bl	8002cae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e066      	b.n	8002570 <HAL_TIM_OC_ConfigChannel+0xec>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b14      	cmp	r3, #20
 80024ae:	d857      	bhi.n	8002560 <HAL_TIM_OC_ConfigChannel+0xdc>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	0800250d 	.word	0x0800250d
 80024bc:	08002561 	.word	0x08002561
 80024c0:	08002561 	.word	0x08002561
 80024c4:	08002561 	.word	0x08002561
 80024c8:	0800251b 	.word	0x0800251b
 80024cc:	08002561 	.word	0x08002561
 80024d0:	08002561 	.word	0x08002561
 80024d4:	08002561 	.word	0x08002561
 80024d8:	08002529 	.word	0x08002529
 80024dc:	08002561 	.word	0x08002561
 80024e0:	08002561 	.word	0x08002561
 80024e4:	08002561 	.word	0x08002561
 80024e8:	08002537 	.word	0x08002537
 80024ec:	08002561 	.word	0x08002561
 80024f0:	08002561 	.word	0x08002561
 80024f4:	08002561 	.word	0x08002561
 80024f8:	08002545 	.word	0x08002545
 80024fc:	08002561 	.word	0x08002561
 8002500:	08002561 	.word	0x08002561
 8002504:	08002561 	.word	0x08002561
 8002508:	08002553 	.word	0x08002553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f948 	bl	80027a8 <TIM_OC1_SetConfig>
      break;
 8002518:	e025      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f9b3 	bl	800288c <TIM_OC2_SetConfig>
      break;
 8002526:	e01e      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fa24 	bl	800297c <TIM_OC3_SetConfig>
      break;
 8002534:	e017      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fa93 	bl	8002a68 <TIM_OC4_SetConfig>
      break;
 8002542:	e010      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fae4 	bl	8002b18 <TIM_OC5_SetConfig>
      break;
 8002550:	e009      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fb2f 	bl	8002bbc <TIM_OC6_SetConfig>
      break;
 800255e:	e002      	b.n	8002566 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
      break;
 8002564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d831      	bhi.n	80025f0 <HAL_TIM_ReadCapturedValue+0x78>
 800258c:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <HAL_TIM_ReadCapturedValue+0x1c>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025c9 	.word	0x080025c9
 8002598:	080025f1 	.word	0x080025f1
 800259c:	080025f1 	.word	0x080025f1
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	080025d3 	.word	0x080025d3
 80025a8:	080025f1 	.word	0x080025f1
 80025ac:	080025f1 	.word	0x080025f1
 80025b0:	080025f1 	.word	0x080025f1
 80025b4:	080025dd 	.word	0x080025dd
 80025b8:	080025f1 	.word	0x080025f1
 80025bc:	080025f1 	.word	0x080025f1
 80025c0:	080025f1 	.word	0x080025f1
 80025c4:	080025e7 	.word	0x080025e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	60fb      	str	r3, [r7, #12]

      break;
 80025d0:	e00f      	b.n	80025f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d8:	60fb      	str	r3, [r7, #12]

      break;
 80025da:	e00a      	b.n	80025f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	60fb      	str	r3, [r7, #12]

      break;
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	60fb      	str	r3, [r7, #12]

      break;
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80025f0:	bf00      	nop
  }

  return tmpreg;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a46      	ldr	r2, [pc, #280]	@ (800277c <TIM_Base_SetConfig+0x12c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266e:	d00f      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a43      	ldr	r2, [pc, #268]	@ (8002780 <TIM_Base_SetConfig+0x130>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a42      	ldr	r2, [pc, #264]	@ (8002784 <TIM_Base_SetConfig+0x134>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a41      	ldr	r2, [pc, #260]	@ (8002788 <TIM_Base_SetConfig+0x138>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a40      	ldr	r2, [pc, #256]	@ (800278c <TIM_Base_SetConfig+0x13c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a35      	ldr	r2, [pc, #212]	@ (800277c <TIM_Base_SetConfig+0x12c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b0:	d027      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a32      	ldr	r2, [pc, #200]	@ (8002780 <TIM_Base_SetConfig+0x130>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d023      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a31      	ldr	r2, [pc, #196]	@ (8002784 <TIM_Base_SetConfig+0x134>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a30      	ldr	r2, [pc, #192]	@ (8002788 <TIM_Base_SetConfig+0x138>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <TIM_Base_SetConfig+0x13c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d017      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002790 <TIM_Base_SetConfig+0x140>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <TIM_Base_SetConfig+0x144>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002798 <TIM_Base_SetConfig+0x148>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <TIM_Base_SetConfig+0x14c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2a      	ldr	r2, [pc, #168]	@ (80027a0 <TIM_Base_SetConfig+0x150>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <TIM_Base_SetConfig+0x154>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a10      	ldr	r2, [pc, #64]	@ (800277c <TIM_Base_SetConfig+0x12c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <TIM_Base_SetConfig+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
  }
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40010400 	.word	0x40010400
 8002790:	40014000 	.word	0x40014000
 8002794:	40014400 	.word	0x40014400
 8002798:	40014800 	.word	0x40014800
 800279c:	40001800 	.word	0x40001800
 80027a0:	40001c00 	.word	0x40001c00
 80027a4:	40002000 	.word	0x40002000

080027a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 0201 	bic.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <TIM_OC1_SetConfig+0xd8>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f023 0302 	bic.w	r3, r3, #2
 80027f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <TIM_OC1_SetConfig+0xdc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_OC1_SetConfig+0x64>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <TIM_OC1_SetConfig+0xe0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10c      	bne.n	8002826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0308 	bic.w	r3, r3, #8
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <TIM_OC1_SetConfig+0xdc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_OC1_SetConfig+0x8e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <TIM_OC1_SetConfig+0xe0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d111      	bne.n	800285a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800283c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	fffeff8f 	.word	0xfffeff8f
 8002884:	40010000 	.word	0x40010000
 8002888:	40010400 	.word	0x40010400

0800288c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0210 	bic.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <TIM_OC2_SetConfig+0xe4>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0320 	bic.w	r3, r3, #32
 80028d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a23      	ldr	r2, [pc, #140]	@ (8002974 <TIM_OC2_SetConfig+0xe8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC2_SetConfig+0x68>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <TIM_OC2_SetConfig+0xec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10d      	bne.n	8002910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <TIM_OC2_SetConfig+0xe8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_OC2_SetConfig+0x94>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <TIM_OC2_SetConfig+0xec>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d113      	bne.n	8002948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	feff8fff 	.word	0xfeff8fff
 8002974:	40010000 	.word	0x40010000
 8002978:	40010400 	.word	0x40010400

0800297c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <TIM_OC3_SetConfig+0xe0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <TIM_OC3_SetConfig+0xe4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d003      	beq.n	80029e2 <TIM_OC3_SetConfig+0x66>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <TIM_OC3_SetConfig+0xe8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <TIM_OC3_SetConfig+0xe4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_OC3_SetConfig+0x92>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a16      	ldr	r2, [pc, #88]	@ (8002a64 <TIM_OC3_SetConfig+0xe8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	fffeff8f 	.word	0xfffeff8f
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40010400 	.word	0x40010400

08002a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <TIM_OC4_SetConfig+0xa4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <TIM_OC4_SetConfig+0xa8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC4_SetConfig+0x68>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <TIM_OC4_SetConfig+0xac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d109      	bne.n	8002ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	621a      	str	r2, [r3, #32]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	feff8fff 	.word	0xfeff8fff
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40010400 	.word	0x40010400

08002b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <TIM_OC5_SetConfig+0x98>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002b58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <TIM_OC5_SetConfig+0x9c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC5_SetConfig+0x5e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <TIM_OC5_SetConfig+0xa0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d109      	bne.n	8002b8a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	fffeff8f 	.word	0xfffeff8f
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010400 	.word	0x40010400

08002bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <TIM_OC6_SetConfig+0x9c>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	@ (8002c5c <TIM_OC6_SetConfig+0xa0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC6_SetConfig+0x60>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <TIM_OC6_SetConfig+0xa4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d109      	bne.n	8002c30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	feff8fff 	.word	0xfeff8fff
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40010400 	.word	0x40010400

08002c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e040      	b.n	8002d7e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe f83b 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2224      	movs	r2, #36	@ 0x24
 8002d16:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fb15 	bl	8003360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8ae 	bl	8002e98 <UART_SetConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01b      	b.n	8002d7e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fb94 	bl	80034a4 <UART_CheckIdleState>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08a      	sub	sp, #40	@ 0x28
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d177      	bne.n	8002e8e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_Transmit+0x24>
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e070      	b.n	8002e90 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2221      	movs	r2, #33	@ 0x21
 8002dba:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe f91a 	bl	8000ff4 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dda:	d108      	bne.n	8002dee <HAL_UART_Transmit+0x68>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e003      	b.n	8002df6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df6:	e02f      	b.n	8002e58 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2180      	movs	r1, #128	@ 0x80
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fbf6 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e03b      	b.n	8002e90 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3302      	adds	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e007      	b.n	8002e46 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1c9      	bne.n	8002df8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2140      	movs	r1, #64	@ 0x40
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fbc0 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e005      	b.n	8002e90 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800315c <UART_SetConfig+0x2c4>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a94      	ldr	r2, [pc, #592]	@ (8003160 <UART_SetConfig+0x2c8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <UART_SetConfig+0xbe>
 8002f14:	4b93      	ldr	r3, [pc, #588]	@ (8003164 <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d816      	bhi.n	8002f50 <UART_SetConfig+0xb8>
 8002f22:	a201      	add	r2, pc, #4	@ (adr r2, 8002f28 <UART_SetConfig+0x90>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f3f 	.word	0x08002f3f
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e150      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e14d      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e14a      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e147      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e144      	b.n	80031e0 <UART_SetConfig+0x348>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a83      	ldr	r2, [pc, #524]	@ (8003168 <UART_SetConfig+0x2d0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d132      	bne.n	8002fc6 <UART_SetConfig+0x12e>
 8002f60:	4b80      	ldr	r3, [pc, #512]	@ (8003164 <UART_SetConfig+0x2cc>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d828      	bhi.n	8002fc0 <UART_SetConfig+0x128>
 8002f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <UART_SetConfig+0xdc>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fc1 	.word	0x08002fc1
 8002f7c:	08002fc1 	.word	0x08002fc1
 8002f80:	08002fc1 	.word	0x08002fc1
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fc1 	.word	0x08002fc1
 8002f94:	08002faf 	.word	0x08002faf
 8002f98:	08002fc1 	.word	0x08002fc1
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fc1 	.word	0x08002fc1
 8002fa4:	08002fbb 	.word	0x08002fbb
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e118      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e115      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e112      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e10f      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e10c      	b.n	80031e0 <UART_SetConfig+0x348>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a68      	ldr	r2, [pc, #416]	@ (800316c <UART_SetConfig+0x2d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d120      	bne.n	8003012 <UART_SetConfig+0x17a>
 8002fd0:	4b64      	ldr	r3, [pc, #400]	@ (8003164 <UART_SetConfig+0x2cc>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fda:	2b30      	cmp	r3, #48	@ 0x30
 8002fdc:	d013      	beq.n	8003006 <UART_SetConfig+0x16e>
 8002fde:	2b30      	cmp	r3, #48	@ 0x30
 8002fe0:	d814      	bhi.n	800300c <UART_SetConfig+0x174>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d009      	beq.n	8002ffa <UART_SetConfig+0x162>
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d810      	bhi.n	800300c <UART_SetConfig+0x174>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <UART_SetConfig+0x15c>
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d006      	beq.n	8003000 <UART_SetConfig+0x168>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x174>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e0f2      	b.n	80031e0 <UART_SetConfig+0x348>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e0ef      	b.n	80031e0 <UART_SetConfig+0x348>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e0ec      	b.n	80031e0 <UART_SetConfig+0x348>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e0e9      	b.n	80031e0 <UART_SetConfig+0x348>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e0e6      	b.n	80031e0 <UART_SetConfig+0x348>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a56      	ldr	r2, [pc, #344]	@ (8003170 <UART_SetConfig+0x2d8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d120      	bne.n	800305e <UART_SetConfig+0x1c6>
 800301c:	4b51      	ldr	r3, [pc, #324]	@ (8003164 <UART_SetConfig+0x2cc>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003026:	2bc0      	cmp	r3, #192	@ 0xc0
 8003028:	d013      	beq.n	8003052 <UART_SetConfig+0x1ba>
 800302a:	2bc0      	cmp	r3, #192	@ 0xc0
 800302c:	d814      	bhi.n	8003058 <UART_SetConfig+0x1c0>
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d009      	beq.n	8003046 <UART_SetConfig+0x1ae>
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d810      	bhi.n	8003058 <UART_SetConfig+0x1c0>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x1a8>
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	d006      	beq.n	800304c <UART_SetConfig+0x1b4>
 800303e:	e00b      	b.n	8003058 <UART_SetConfig+0x1c0>
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e0cc      	b.n	80031e0 <UART_SetConfig+0x348>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e0c9      	b.n	80031e0 <UART_SetConfig+0x348>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e0c6      	b.n	80031e0 <UART_SetConfig+0x348>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e0c3      	b.n	80031e0 <UART_SetConfig+0x348>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e0c0      	b.n	80031e0 <UART_SetConfig+0x348>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a44      	ldr	r2, [pc, #272]	@ (8003174 <UART_SetConfig+0x2dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <UART_SetConfig+0x21c>
 8003068:	4b3e      	ldr	r3, [pc, #248]	@ (8003164 <UART_SetConfig+0x2cc>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003076:	d017      	beq.n	80030a8 <UART_SetConfig+0x210>
 8003078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800307c:	d817      	bhi.n	80030ae <UART_SetConfig+0x216>
 800307e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003082:	d00b      	beq.n	800309c <UART_SetConfig+0x204>
 8003084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003088:	d811      	bhi.n	80030ae <UART_SetConfig+0x216>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <UART_SetConfig+0x1fe>
 800308e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003092:	d006      	beq.n	80030a2 <UART_SetConfig+0x20a>
 8003094:	e00b      	b.n	80030ae <UART_SetConfig+0x216>
 8003096:	2300      	movs	r3, #0
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0a1      	b.n	80031e0 <UART_SetConfig+0x348>
 800309c:	2302      	movs	r3, #2
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e09e      	b.n	80031e0 <UART_SetConfig+0x348>
 80030a2:	2304      	movs	r3, #4
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e09b      	b.n	80031e0 <UART_SetConfig+0x348>
 80030a8:	2308      	movs	r3, #8
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e098      	b.n	80031e0 <UART_SetConfig+0x348>
 80030ae:	2310      	movs	r3, #16
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e095      	b.n	80031e0 <UART_SetConfig+0x348>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <UART_SetConfig+0x2e0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d125      	bne.n	800310a <UART_SetConfig+0x272>
 80030be:	4b29      	ldr	r3, [pc, #164]	@ (8003164 <UART_SetConfig+0x2cc>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030cc:	d017      	beq.n	80030fe <UART_SetConfig+0x266>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030d2:	d817      	bhi.n	8003104 <UART_SetConfig+0x26c>
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d8:	d00b      	beq.n	80030f2 <UART_SetConfig+0x25a>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030de:	d811      	bhi.n	8003104 <UART_SetConfig+0x26c>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <UART_SetConfig+0x254>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e8:	d006      	beq.n	80030f8 <UART_SetConfig+0x260>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x26c>
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e076      	b.n	80031e0 <UART_SetConfig+0x348>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e073      	b.n	80031e0 <UART_SetConfig+0x348>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e070      	b.n	80031e0 <UART_SetConfig+0x348>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e06d      	b.n	80031e0 <UART_SetConfig+0x348>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e06a      	b.n	80031e0 <UART_SetConfig+0x348>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <UART_SetConfig+0x2e4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d138      	bne.n	8003186 <UART_SetConfig+0x2ee>
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <UART_SetConfig+0x2cc>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800311e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003122:	d017      	beq.n	8003154 <UART_SetConfig+0x2bc>
 8003124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003128:	d82a      	bhi.n	8003180 <UART_SetConfig+0x2e8>
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312e:	d00b      	beq.n	8003148 <UART_SetConfig+0x2b0>
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003134:	d824      	bhi.n	8003180 <UART_SetConfig+0x2e8>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <UART_SetConfig+0x2aa>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d006      	beq.n	800314e <UART_SetConfig+0x2b6>
 8003140:	e01e      	b.n	8003180 <UART_SetConfig+0x2e8>
 8003142:	2300      	movs	r3, #0
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e04b      	b.n	80031e0 <UART_SetConfig+0x348>
 8003148:	2302      	movs	r3, #2
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e048      	b.n	80031e0 <UART_SetConfig+0x348>
 800314e:	2304      	movs	r3, #4
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e045      	b.n	80031e0 <UART_SetConfig+0x348>
 8003154:	2308      	movs	r3, #8
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e042      	b.n	80031e0 <UART_SetConfig+0x348>
 800315a:	bf00      	nop
 800315c:	efff69f3 	.word	0xefff69f3
 8003160:	40011000 	.word	0x40011000
 8003164:	40023800 	.word	0x40023800
 8003168:	40004400 	.word	0x40004400
 800316c:	40004800 	.word	0x40004800
 8003170:	40004c00 	.word	0x40004c00
 8003174:	40005000 	.word	0x40005000
 8003178:	40011400 	.word	0x40011400
 800317c:	40007800 	.word	0x40007800
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e02c      	b.n	80031e0 <UART_SetConfig+0x348>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a72      	ldr	r2, [pc, #456]	@ (8003354 <UART_SetConfig+0x4bc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d125      	bne.n	80031dc <UART_SetConfig+0x344>
 8003190:	4b71      	ldr	r3, [pc, #452]	@ (8003358 <UART_SetConfig+0x4c0>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800319a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800319e:	d017      	beq.n	80031d0 <UART_SetConfig+0x338>
 80031a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031a4:	d817      	bhi.n	80031d6 <UART_SetConfig+0x33e>
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031aa:	d00b      	beq.n	80031c4 <UART_SetConfig+0x32c>
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b0:	d811      	bhi.n	80031d6 <UART_SetConfig+0x33e>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <UART_SetConfig+0x326>
 80031b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ba:	d006      	beq.n	80031ca <UART_SetConfig+0x332>
 80031bc:	e00b      	b.n	80031d6 <UART_SetConfig+0x33e>
 80031be:	2300      	movs	r3, #0
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e00d      	b.n	80031e0 <UART_SetConfig+0x348>
 80031c4:	2302      	movs	r3, #2
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e00a      	b.n	80031e0 <UART_SetConfig+0x348>
 80031ca:	2304      	movs	r3, #4
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e007      	b.n	80031e0 <UART_SetConfig+0x348>
 80031d0:	2308      	movs	r3, #8
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e004      	b.n	80031e0 <UART_SetConfig+0x348>
 80031d6:	2310      	movs	r3, #16
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e001      	b.n	80031e0 <UART_SetConfig+0x348>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e8:	d15b      	bne.n	80032a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d828      	bhi.n	8003242 <UART_SetConfig+0x3aa>
 80031f0:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0x360>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe fe62 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fe72 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <UART_SetConfig+0x4c4>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7fe fd85 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d074      	beq.n	800333c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d916      	bls.n	800329c <UART_SetConfig+0x404>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d212      	bcs.n	800329c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	b29a      	uxth	r2, r3
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	4313      	orrs	r3, r2
 8003290:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	89fa      	ldrh	r2, [r7, #14]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e04f      	b.n	800333c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77bb      	strb	r3, [r7, #30]
 80032a0:	e04c      	b.n	800333c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d828      	bhi.n	80032fa <UART_SetConfig+0x462>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <UART_SetConfig+0x418>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe fe06 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 80032d8:	61b8      	str	r0, [r7, #24]
        break;
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fe16 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <UART_SetConfig+0x4c4>)
 80032e6:	61bb      	str	r3, [r7, #24]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fd29 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80032ee:	61b8      	str	r0, [r7, #24]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77bb      	strb	r3, [r7, #30]
        break;
 8003302:	bf00      	nop
    }

    if (pclk != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d909      	bls.n	8003338 <UART_SetConfig+0x4a0>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332a:	d205      	bcs.n	8003338 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e001      	b.n	800333c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003348:	7fbb      	ldrb	r3, [r7, #30]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40007c00 	.word	0x40007c00
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345e:	d10a      	bne.n	8003476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b098      	sub	sp, #96	@ 0x60
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b4:	f7fd fd9e 	bl	8000ff4 <HAL_GetTick>
 80034b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d12e      	bne.n	8003526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f88c 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d021      	beq.n	8003526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003500:	647b      	str	r3, [r7, #68]	@ 0x44
 8003502:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e6      	bne.n	80034e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e062      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d149      	bne.n	80035c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f856 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03c      	beq.n	80035c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	623b      	str	r3, [r7, #32]
   return(result);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
 800356e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e011      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3758      	adds	r7, #88	@ 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e04f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360c:	d04b      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fcf1 	bl	8000ff4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e04e      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d037      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d034      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d031      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d110      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2208      	movs	r2, #8
 8003656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f838 	bl	80036ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2208      	movs	r2, #8
 8003662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e029      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003680:	d111      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800368a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f81e 	bl	80036ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d0a0      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b095      	sub	sp, #84	@ 0x54
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003740:	2b01      	cmp	r3, #1
 8003742:	d118      	bne.n	8003776 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60bb      	str	r3, [r7, #8]
   return(result);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	647b      	str	r3, [r7, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800378a:	bf00      	nop
 800378c:	3754      	adds	r7, #84	@ 0x54
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <siprintf>:
 8003798:	b40e      	push	{r1, r2, r3}
 800379a:	b500      	push	{lr}
 800379c:	b09c      	sub	sp, #112	@ 0x70
 800379e:	ab1d      	add	r3, sp, #116	@ 0x74
 80037a0:	9002      	str	r0, [sp, #8]
 80037a2:	9006      	str	r0, [sp, #24]
 80037a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037a8:	4809      	ldr	r0, [pc, #36]	@ (80037d0 <siprintf+0x38>)
 80037aa:	9107      	str	r1, [sp, #28]
 80037ac:	9104      	str	r1, [sp, #16]
 80037ae:	4909      	ldr	r1, [pc, #36]	@ (80037d4 <siprintf+0x3c>)
 80037b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	a902      	add	r1, sp, #8
 80037bc:	f000 f98e 	bl	8003adc <_svfiprintf_r>
 80037c0:	9b02      	ldr	r3, [sp, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	b01c      	add	sp, #112	@ 0x70
 80037c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	ffff0208 	.word	0xffff0208

080037d8 <memset>:
 80037d8:	4402      	add	r2, r0
 80037da:	4603      	mov	r3, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	f803 1b01 	strb.w	r1, [r3], #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003824 <__libc_init_array+0x3c>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2600      	movs	r6, #0
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	@ (800382c <__libc_init_array+0x44>)
 80037fc:	f000 fc74 	bl	80040e8 <_init>
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2600      	movs	r6, #0
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	0800431c 	.word	0x0800431c
 8003824:	0800431c 	.word	0x0800431c
 8003828:	0800431c 	.word	0x0800431c
 800382c:	08004320 	.word	0x08004320

08003830 <__retarget_lock_acquire_recursive>:
 8003830:	4770      	bx	lr

08003832 <__retarget_lock_release_recursive>:
 8003832:	4770      	bx	lr

08003834 <_free_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4605      	mov	r5, r0
 8003838:	2900      	cmp	r1, #0
 800383a:	d041      	beq.n	80038c0 <_free_r+0x8c>
 800383c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003840:	1f0c      	subs	r4, r1, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfb8      	it	lt
 8003846:	18e4      	addlt	r4, r4, r3
 8003848:	f000 f8e0 	bl	8003a0c <__malloc_lock>
 800384c:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <_free_r+0x90>)
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	b933      	cbnz	r3, 8003860 <_free_r+0x2c>
 8003852:	6063      	str	r3, [r4, #4]
 8003854:	6014      	str	r4, [r2, #0]
 8003856:	4628      	mov	r0, r5
 8003858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800385c:	f000 b8dc 	b.w	8003a18 <__malloc_unlock>
 8003860:	42a3      	cmp	r3, r4
 8003862:	d908      	bls.n	8003876 <_free_r+0x42>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	1821      	adds	r1, r4, r0
 8003868:	428b      	cmp	r3, r1
 800386a:	bf01      	itttt	eq
 800386c:	6819      	ldreq	r1, [r3, #0]
 800386e:	685b      	ldreq	r3, [r3, #4]
 8003870:	1809      	addeq	r1, r1, r0
 8003872:	6021      	streq	r1, [r4, #0]
 8003874:	e7ed      	b.n	8003852 <_free_r+0x1e>
 8003876:	461a      	mov	r2, r3
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b10b      	cbz	r3, 8003880 <_free_r+0x4c>
 800387c:	42a3      	cmp	r3, r4
 800387e:	d9fa      	bls.n	8003876 <_free_r+0x42>
 8003880:	6811      	ldr	r1, [r2, #0]
 8003882:	1850      	adds	r0, r2, r1
 8003884:	42a0      	cmp	r0, r4
 8003886:	d10b      	bne.n	80038a0 <_free_r+0x6c>
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	4401      	add	r1, r0
 800388c:	1850      	adds	r0, r2, r1
 800388e:	4283      	cmp	r3, r0
 8003890:	6011      	str	r1, [r2, #0]
 8003892:	d1e0      	bne.n	8003856 <_free_r+0x22>
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6053      	str	r3, [r2, #4]
 800389a:	4408      	add	r0, r1
 800389c:	6010      	str	r0, [r2, #0]
 800389e:	e7da      	b.n	8003856 <_free_r+0x22>
 80038a0:	d902      	bls.n	80038a8 <_free_r+0x74>
 80038a2:	230c      	movs	r3, #12
 80038a4:	602b      	str	r3, [r5, #0]
 80038a6:	e7d6      	b.n	8003856 <_free_r+0x22>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf04      	itt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	bf04      	itt	eq
 80038b8:	1809      	addeq	r1, r1, r0
 80038ba:	6021      	streq	r1, [r4, #0]
 80038bc:	6054      	str	r4, [r2, #4]
 80038be:	e7ca      	b.n	8003856 <_free_r+0x22>
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	bf00      	nop
 80038c4:	200003b8 	.word	0x200003b8

080038c8 <sbrk_aligned>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003908 <sbrk_aligned+0x40>)
 80038cc:	460c      	mov	r4, r1
 80038ce:	6831      	ldr	r1, [r6, #0]
 80038d0:	4605      	mov	r5, r0
 80038d2:	b911      	cbnz	r1, 80038da <sbrk_aligned+0x12>
 80038d4:	f000 fba6 	bl	8004024 <_sbrk_r>
 80038d8:	6030      	str	r0, [r6, #0]
 80038da:	4621      	mov	r1, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 fba1 	bl	8004024 <_sbrk_r>
 80038e2:	1c43      	adds	r3, r0, #1
 80038e4:	d103      	bne.n	80038ee <sbrk_aligned+0x26>
 80038e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038ea:	4620      	mov	r0, r4
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	1cc4      	adds	r4, r0, #3
 80038f0:	f024 0403 	bic.w	r4, r4, #3
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d0f8      	beq.n	80038ea <sbrk_aligned+0x22>
 80038f8:	1a21      	subs	r1, r4, r0
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 fb92 	bl	8004024 <_sbrk_r>
 8003900:	3001      	adds	r0, #1
 8003902:	d1f2      	bne.n	80038ea <sbrk_aligned+0x22>
 8003904:	e7ef      	b.n	80038e6 <sbrk_aligned+0x1e>
 8003906:	bf00      	nop
 8003908:	200003b4 	.word	0x200003b4

0800390c <_malloc_r>:
 800390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003910:	1ccd      	adds	r5, r1, #3
 8003912:	f025 0503 	bic.w	r5, r5, #3
 8003916:	3508      	adds	r5, #8
 8003918:	2d0c      	cmp	r5, #12
 800391a:	bf38      	it	cc
 800391c:	250c      	movcc	r5, #12
 800391e:	2d00      	cmp	r5, #0
 8003920:	4606      	mov	r6, r0
 8003922:	db01      	blt.n	8003928 <_malloc_r+0x1c>
 8003924:	42a9      	cmp	r1, r5
 8003926:	d904      	bls.n	8003932 <_malloc_r+0x26>
 8003928:	230c      	movs	r3, #12
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	2000      	movs	r0, #0
 800392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a08 <_malloc_r+0xfc>
 8003936:	f000 f869 	bl	8003a0c <__malloc_lock>
 800393a:	f8d8 3000 	ldr.w	r3, [r8]
 800393e:	461c      	mov	r4, r3
 8003940:	bb44      	cbnz	r4, 8003994 <_malloc_r+0x88>
 8003942:	4629      	mov	r1, r5
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff ffbf 	bl	80038c8 <sbrk_aligned>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	4604      	mov	r4, r0
 800394e:	d158      	bne.n	8003a02 <_malloc_r+0xf6>
 8003950:	f8d8 4000 	ldr.w	r4, [r8]
 8003954:	4627      	mov	r7, r4
 8003956:	2f00      	cmp	r7, #0
 8003958:	d143      	bne.n	80039e2 <_malloc_r+0xd6>
 800395a:	2c00      	cmp	r4, #0
 800395c:	d04b      	beq.n	80039f6 <_malloc_r+0xea>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	4639      	mov	r1, r7
 8003962:	4630      	mov	r0, r6
 8003964:	eb04 0903 	add.w	r9, r4, r3
 8003968:	f000 fb5c 	bl	8004024 <_sbrk_r>
 800396c:	4581      	cmp	r9, r0
 800396e:	d142      	bne.n	80039f6 <_malloc_r+0xea>
 8003970:	6821      	ldr	r1, [r4, #0]
 8003972:	1a6d      	subs	r5, r5, r1
 8003974:	4629      	mov	r1, r5
 8003976:	4630      	mov	r0, r6
 8003978:	f7ff ffa6 	bl	80038c8 <sbrk_aligned>
 800397c:	3001      	adds	r0, #1
 800397e:	d03a      	beq.n	80039f6 <_malloc_r+0xea>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	442b      	add	r3, r5
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	bb62      	cbnz	r2, 80039e8 <_malloc_r+0xdc>
 800398e:	f8c8 7000 	str.w	r7, [r8]
 8003992:	e00f      	b.n	80039b4 <_malloc_r+0xa8>
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	1b52      	subs	r2, r2, r5
 8003998:	d420      	bmi.n	80039dc <_malloc_r+0xd0>
 800399a:	2a0b      	cmp	r2, #11
 800399c:	d917      	bls.n	80039ce <_malloc_r+0xc2>
 800399e:	1961      	adds	r1, r4, r5
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	6025      	str	r5, [r4, #0]
 80039a4:	bf18      	it	ne
 80039a6:	6059      	strne	r1, [r3, #4]
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	bf08      	it	eq
 80039ac:	f8c8 1000 	streq.w	r1, [r8]
 80039b0:	5162      	str	r2, [r4, r5]
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f82f 	bl	8003a18 <__malloc_unlock>
 80039ba:	f104 000b 	add.w	r0, r4, #11
 80039be:	1d23      	adds	r3, r4, #4
 80039c0:	f020 0007 	bic.w	r0, r0, #7
 80039c4:	1ac2      	subs	r2, r0, r3
 80039c6:	bf1c      	itt	ne
 80039c8:	1a1b      	subne	r3, r3, r0
 80039ca:	50a3      	strne	r3, [r4, r2]
 80039cc:	e7af      	b.n	800392e <_malloc_r+0x22>
 80039ce:	6862      	ldr	r2, [r4, #4]
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	bf0c      	ite	eq
 80039d4:	f8c8 2000 	streq.w	r2, [r8]
 80039d8:	605a      	strne	r2, [r3, #4]
 80039da:	e7eb      	b.n	80039b4 <_malloc_r+0xa8>
 80039dc:	4623      	mov	r3, r4
 80039de:	6864      	ldr	r4, [r4, #4]
 80039e0:	e7ae      	b.n	8003940 <_malloc_r+0x34>
 80039e2:	463c      	mov	r4, r7
 80039e4:	687f      	ldr	r7, [r7, #4]
 80039e6:	e7b6      	b.n	8003956 <_malloc_r+0x4a>
 80039e8:	461a      	mov	r2, r3
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d1fb      	bne.n	80039e8 <_malloc_r+0xdc>
 80039f0:	2300      	movs	r3, #0
 80039f2:	6053      	str	r3, [r2, #4]
 80039f4:	e7de      	b.n	80039b4 <_malloc_r+0xa8>
 80039f6:	230c      	movs	r3, #12
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	4630      	mov	r0, r6
 80039fc:	f000 f80c 	bl	8003a18 <__malloc_unlock>
 8003a00:	e794      	b.n	800392c <_malloc_r+0x20>
 8003a02:	6005      	str	r5, [r0, #0]
 8003a04:	e7d6      	b.n	80039b4 <_malloc_r+0xa8>
 8003a06:	bf00      	nop
 8003a08:	200003b8 	.word	0x200003b8

08003a0c <__malloc_lock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	@ (8003a14 <__malloc_lock+0x8>)
 8003a0e:	f7ff bf0f 	b.w	8003830 <__retarget_lock_acquire_recursive>
 8003a12:	bf00      	nop
 8003a14:	200003b0 	.word	0x200003b0

08003a18 <__malloc_unlock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	@ (8003a20 <__malloc_unlock+0x8>)
 8003a1a:	f7ff bf0a 	b.w	8003832 <__retarget_lock_release_recursive>
 8003a1e:	bf00      	nop
 8003a20:	200003b0 	.word	0x200003b0

08003a24 <__ssputs_r>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	688e      	ldr	r6, [r1, #8]
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	42be      	cmp	r6, r7
 8003a2e:	680b      	ldr	r3, [r1, #0]
 8003a30:	4682      	mov	sl, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	4690      	mov	r8, r2
 8003a36:	d82d      	bhi.n	8003a94 <__ssputs_r+0x70>
 8003a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a40:	d026      	beq.n	8003a90 <__ssputs_r+0x6c>
 8003a42:	6965      	ldr	r5, [r4, #20]
 8003a44:	6909      	ldr	r1, [r1, #16]
 8003a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a4a:	eba3 0901 	sub.w	r9, r3, r1
 8003a4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a52:	1c7b      	adds	r3, r7, #1
 8003a54:	444b      	add	r3, r9
 8003a56:	106d      	asrs	r5, r5, #1
 8003a58:	429d      	cmp	r5, r3
 8003a5a:	bf38      	it	cc
 8003a5c:	461d      	movcc	r5, r3
 8003a5e:	0553      	lsls	r3, r2, #21
 8003a60:	d527      	bpl.n	8003ab2 <__ssputs_r+0x8e>
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7ff ff52 	bl	800390c <_malloc_r>
 8003a68:	4606      	mov	r6, r0
 8003a6a:	b360      	cbz	r0, 8003ac6 <__ssputs_r+0xa2>
 8003a6c:	6921      	ldr	r1, [r4, #16]
 8003a6e:	464a      	mov	r2, r9
 8003a70:	f000 fae8 	bl	8004044 <memcpy>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7e:	81a3      	strh	r3, [r4, #12]
 8003a80:	6126      	str	r6, [r4, #16]
 8003a82:	6165      	str	r5, [r4, #20]
 8003a84:	444e      	add	r6, r9
 8003a86:	eba5 0509 	sub.w	r5, r5, r9
 8003a8a:	6026      	str	r6, [r4, #0]
 8003a8c:	60a5      	str	r5, [r4, #8]
 8003a8e:	463e      	mov	r6, r7
 8003a90:	42be      	cmp	r6, r7
 8003a92:	d900      	bls.n	8003a96 <__ssputs_r+0x72>
 8003a94:	463e      	mov	r6, r7
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	f000 faa8 	bl	8003ff0 <memmove>
 8003aa0:	68a3      	ldr	r3, [r4, #8]
 8003aa2:	1b9b      	subs	r3, r3, r6
 8003aa4:	60a3      	str	r3, [r4, #8]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	4433      	add	r3, r6
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	2000      	movs	r0, #0
 8003aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab2:	462a      	mov	r2, r5
 8003ab4:	f000 fad4 	bl	8004060 <_realloc_r>
 8003ab8:	4606      	mov	r6, r0
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1e0      	bne.n	8003a80 <__ssputs_r+0x5c>
 8003abe:	6921      	ldr	r1, [r4, #16]
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	f7ff feb7 	bl	8003834 <_free_r>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	f8ca 3000 	str.w	r3, [sl]
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ad8:	e7e9      	b.n	8003aae <__ssputs_r+0x8a>
	...

08003adc <_svfiprintf_r>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	4698      	mov	r8, r3
 8003ae2:	898b      	ldrh	r3, [r1, #12]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	b09d      	sub	sp, #116	@ 0x74
 8003ae8:	4607      	mov	r7, r0
 8003aea:	460d      	mov	r5, r1
 8003aec:	4614      	mov	r4, r2
 8003aee:	d510      	bpl.n	8003b12 <_svfiprintf_r+0x36>
 8003af0:	690b      	ldr	r3, [r1, #16]
 8003af2:	b973      	cbnz	r3, 8003b12 <_svfiprintf_r+0x36>
 8003af4:	2140      	movs	r1, #64	@ 0x40
 8003af6:	f7ff ff09 	bl	800390c <_malloc_r>
 8003afa:	6028      	str	r0, [r5, #0]
 8003afc:	6128      	str	r0, [r5, #16]
 8003afe:	b930      	cbnz	r0, 8003b0e <_svfiprintf_r+0x32>
 8003b00:	230c      	movs	r3, #12
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b08:	b01d      	add	sp, #116	@ 0x74
 8003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0e:	2340      	movs	r3, #64	@ 0x40
 8003b10:	616b      	str	r3, [r5, #20]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b16:	2320      	movs	r3, #32
 8003b18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b20:	2330      	movs	r3, #48	@ 0x30
 8003b22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003cc0 <_svfiprintf_r+0x1e4>
 8003b26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b2a:	f04f 0901 	mov.w	r9, #1
 8003b2e:	4623      	mov	r3, r4
 8003b30:	469a      	mov	sl, r3
 8003b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b36:	b10a      	cbz	r2, 8003b3c <_svfiprintf_r+0x60>
 8003b38:	2a25      	cmp	r2, #37	@ 0x25
 8003b3a:	d1f9      	bne.n	8003b30 <_svfiprintf_r+0x54>
 8003b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b40:	d00b      	beq.n	8003b5a <_svfiprintf_r+0x7e>
 8003b42:	465b      	mov	r3, fp
 8003b44:	4622      	mov	r2, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7ff ff6b 	bl	8003a24 <__ssputs_r>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	f000 80a7 	beq.w	8003ca2 <_svfiprintf_r+0x1c6>
 8003b54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b56:	445a      	add	r2, fp
 8003b58:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 809f 	beq.w	8003ca2 <_svfiprintf_r+0x1c6>
 8003b64:	2300      	movs	r3, #0
 8003b66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b6e:	f10a 0a01 	add.w	sl, sl, #1
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	9307      	str	r3, [sp, #28]
 8003b76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b7c:	4654      	mov	r4, sl
 8003b7e:	2205      	movs	r2, #5
 8003b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b84:	484e      	ldr	r0, [pc, #312]	@ (8003cc0 <_svfiprintf_r+0x1e4>)
 8003b86:	f7fc fb63 	bl	8000250 <memchr>
 8003b8a:	9a04      	ldr	r2, [sp, #16]
 8003b8c:	b9d8      	cbnz	r0, 8003bc6 <_svfiprintf_r+0xea>
 8003b8e:	06d0      	lsls	r0, r2, #27
 8003b90:	bf44      	itt	mi
 8003b92:	2320      	movmi	r3, #32
 8003b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b98:	0711      	lsls	r1, r2, #28
 8003b9a:	bf44      	itt	mi
 8003b9c:	232b      	movmi	r3, #43	@ 0x2b
 8003b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba8:	d015      	beq.n	8003bd6 <_svfiprintf_r+0xfa>
 8003baa:	9a07      	ldr	r2, [sp, #28]
 8003bac:	4654      	mov	r4, sl
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f04f 0c0a 	mov.w	ip, #10
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bba:	3b30      	subs	r3, #48	@ 0x30
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d94b      	bls.n	8003c58 <_svfiprintf_r+0x17c>
 8003bc0:	b1b0      	cbz	r0, 8003bf0 <_svfiprintf_r+0x114>
 8003bc2:	9207      	str	r2, [sp, #28]
 8003bc4:	e014      	b.n	8003bf0 <_svfiprintf_r+0x114>
 8003bc6:	eba0 0308 	sub.w	r3, r0, r8
 8003bca:	fa09 f303 	lsl.w	r3, r9, r3
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	46a2      	mov	sl, r4
 8003bd4:	e7d2      	b.n	8003b7c <_svfiprintf_r+0xa0>
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	1d19      	adds	r1, r3, #4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	9103      	str	r1, [sp, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfbb      	ittet	lt
 8003be2:	425b      	neglt	r3, r3
 8003be4:	f042 0202 	orrlt.w	r2, r2, #2
 8003be8:	9307      	strge	r3, [sp, #28]
 8003bea:	9307      	strlt	r3, [sp, #28]
 8003bec:	bfb8      	it	lt
 8003bee:	9204      	strlt	r2, [sp, #16]
 8003bf0:	7823      	ldrb	r3, [r4, #0]
 8003bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bf4:	d10a      	bne.n	8003c0c <_svfiprintf_r+0x130>
 8003bf6:	7863      	ldrb	r3, [r4, #1]
 8003bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bfa:	d132      	bne.n	8003c62 <_svfiprintf_r+0x186>
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	9203      	str	r2, [sp, #12]
 8003c04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c08:	3402      	adds	r4, #2
 8003c0a:	9305      	str	r3, [sp, #20]
 8003c0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003cd0 <_svfiprintf_r+0x1f4>
 8003c10:	7821      	ldrb	r1, [r4, #0]
 8003c12:	2203      	movs	r2, #3
 8003c14:	4650      	mov	r0, sl
 8003c16:	f7fc fb1b 	bl	8000250 <memchr>
 8003c1a:	b138      	cbz	r0, 8003c2c <_svfiprintf_r+0x150>
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	eba0 000a 	sub.w	r0, r0, sl
 8003c22:	2240      	movs	r2, #64	@ 0x40
 8003c24:	4082      	lsls	r2, r0
 8003c26:	4313      	orrs	r3, r2
 8003c28:	3401      	adds	r4, #1
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c30:	4824      	ldr	r0, [pc, #144]	@ (8003cc4 <_svfiprintf_r+0x1e8>)
 8003c32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c36:	2206      	movs	r2, #6
 8003c38:	f7fc fb0a 	bl	8000250 <memchr>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d036      	beq.n	8003cae <_svfiprintf_r+0x1d2>
 8003c40:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <_svfiprintf_r+0x1ec>)
 8003c42:	bb1b      	cbnz	r3, 8003c8c <_svfiprintf_r+0x1b0>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	3307      	adds	r3, #7
 8003c48:	f023 0307 	bic.w	r3, r3, #7
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c52:	4433      	add	r3, r6
 8003c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c56:	e76a      	b.n	8003b2e <_svfiprintf_r+0x52>
 8003c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	2001      	movs	r0, #1
 8003c60:	e7a8      	b.n	8003bb4 <_svfiprintf_r+0xd8>
 8003c62:	2300      	movs	r3, #0
 8003c64:	3401      	adds	r4, #1
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f04f 0c0a 	mov.w	ip, #10
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c74:	3a30      	subs	r2, #48	@ 0x30
 8003c76:	2a09      	cmp	r2, #9
 8003c78:	d903      	bls.n	8003c82 <_svfiprintf_r+0x1a6>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0c6      	beq.n	8003c0c <_svfiprintf_r+0x130>
 8003c7e:	9105      	str	r1, [sp, #20]
 8003c80:	e7c4      	b.n	8003c0c <_svfiprintf_r+0x130>
 8003c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c86:	4604      	mov	r4, r0
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e7f0      	b.n	8003c6e <_svfiprintf_r+0x192>
 8003c8c:	ab03      	add	r3, sp, #12
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	462a      	mov	r2, r5
 8003c92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <_svfiprintf_r+0x1f0>)
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	4638      	mov	r0, r7
 8003c98:	f3af 8000 	nop.w
 8003c9c:	1c42      	adds	r2, r0, #1
 8003c9e:	4606      	mov	r6, r0
 8003ca0:	d1d6      	bne.n	8003c50 <_svfiprintf_r+0x174>
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	065b      	lsls	r3, r3, #25
 8003ca6:	f53f af2d 	bmi.w	8003b04 <_svfiprintf_r+0x28>
 8003caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cac:	e72c      	b.n	8003b08 <_svfiprintf_r+0x2c>
 8003cae:	ab03      	add	r3, sp, #12
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <_svfiprintf_r+0x1f0>)
 8003cb6:	a904      	add	r1, sp, #16
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f000 f879 	bl	8003db0 <_printf_i>
 8003cbe:	e7ed      	b.n	8003c9c <_svfiprintf_r+0x1c0>
 8003cc0:	080042e0 	.word	0x080042e0
 8003cc4:	080042ea 	.word	0x080042ea
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	08003a25 	.word	0x08003a25
 8003cd0:	080042e6 	.word	0x080042e6

08003cd4 <_printf_common>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	4616      	mov	r6, r2
 8003cda:	4698      	mov	r8, r3
 8003cdc:	688a      	ldr	r2, [r1, #8]
 8003cde:	690b      	ldr	r3, [r1, #16]
 8003ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bfb8      	it	lt
 8003ce8:	4613      	movlt	r3, r2
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	b10a      	cbz	r2, 8003cfa <_printf_common+0x26>
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	0699      	lsls	r1, r3, #26
 8003cfe:	bf42      	ittt	mi
 8003d00:	6833      	ldrmi	r3, [r6, #0]
 8003d02:	3302      	addmi	r3, #2
 8003d04:	6033      	strmi	r3, [r6, #0]
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	f015 0506 	ands.w	r5, r5, #6
 8003d0c:	d106      	bne.n	8003d1c <_printf_common+0x48>
 8003d0e:	f104 0a19 	add.w	sl, r4, #25
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	6832      	ldr	r2, [r6, #0]
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	dc26      	bgt.n	8003d6a <_printf_common+0x96>
 8003d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	3b00      	subs	r3, #0
 8003d24:	bf18      	it	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	0692      	lsls	r2, r2, #26
 8003d2a:	d42b      	bmi.n	8003d84 <_printf_common+0xb0>
 8003d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d30:	4641      	mov	r1, r8
 8003d32:	4638      	mov	r0, r7
 8003d34:	47c8      	blx	r9
 8003d36:	3001      	adds	r0, #1
 8003d38:	d01e      	beq.n	8003d78 <_printf_common+0xa4>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	f003 0306 	and.w	r3, r3, #6
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf02      	ittt	eq
 8003d46:	68e5      	ldreq	r5, [r4, #12]
 8003d48:	6833      	ldreq	r3, [r6, #0]
 8003d4a:	1aed      	subeq	r5, r5, r3
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	bf0c      	ite	eq
 8003d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d54:	2500      	movne	r5, #0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	bfc4      	itt	gt
 8003d5a:	1a9b      	subgt	r3, r3, r2
 8003d5c:	18ed      	addgt	r5, r5, r3
 8003d5e:	2600      	movs	r6, #0
 8003d60:	341a      	adds	r4, #26
 8003d62:	42b5      	cmp	r5, r6
 8003d64:	d11a      	bne.n	8003d9c <_printf_common+0xc8>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e008      	b.n	8003d7c <_printf_common+0xa8>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4652      	mov	r2, sl
 8003d6e:	4641      	mov	r1, r8
 8003d70:	4638      	mov	r0, r7
 8003d72:	47c8      	blx	r9
 8003d74:	3001      	adds	r0, #1
 8003d76:	d103      	bne.n	8003d80 <_printf_common+0xac>
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d80:	3501      	adds	r5, #1
 8003d82:	e7c6      	b.n	8003d12 <_printf_common+0x3e>
 8003d84:	18e1      	adds	r1, r4, r3
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	2030      	movs	r0, #48	@ 0x30
 8003d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d8e:	4422      	add	r2, r4
 8003d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d98:	3302      	adds	r3, #2
 8003d9a:	e7c7      	b.n	8003d2c <_printf_common+0x58>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4641      	mov	r1, r8
 8003da2:	4638      	mov	r0, r7
 8003da4:	47c8      	blx	r9
 8003da6:	3001      	adds	r0, #1
 8003da8:	d0e6      	beq.n	8003d78 <_printf_common+0xa4>
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7d9      	b.n	8003d62 <_printf_common+0x8e>
	...

08003db0 <_printf_i>:
 8003db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	7e0f      	ldrb	r7, [r1, #24]
 8003db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003db8:	2f78      	cmp	r7, #120	@ 0x78
 8003dba:	4691      	mov	r9, r2
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	469a      	mov	sl, r3
 8003dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dc6:	d807      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dc8:	2f62      	cmp	r7, #98	@ 0x62
 8003dca:	d80a      	bhi.n	8003de2 <_printf_i+0x32>
 8003dcc:	2f00      	cmp	r7, #0
 8003dce:	f000 80d2 	beq.w	8003f76 <_printf_i+0x1c6>
 8003dd2:	2f58      	cmp	r7, #88	@ 0x58
 8003dd4:	f000 80b9 	beq.w	8003f4a <_printf_i+0x19a>
 8003dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003de0:	e03a      	b.n	8003e58 <_printf_i+0xa8>
 8003de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003de6:	2b15      	cmp	r3, #21
 8003de8:	d8f6      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dea:	a101      	add	r1, pc, #4	@ (adr r1, 8003df0 <_printf_i+0x40>)
 8003dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df0:	08003e49 	.word	0x08003e49
 8003df4:	08003e5d 	.word	0x08003e5d
 8003df8:	08003dd9 	.word	0x08003dd9
 8003dfc:	08003dd9 	.word	0x08003dd9
 8003e00:	08003dd9 	.word	0x08003dd9
 8003e04:	08003dd9 	.word	0x08003dd9
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003dd9 	.word	0x08003dd9
 8003e10:	08003dd9 	.word	0x08003dd9
 8003e14:	08003dd9 	.word	0x08003dd9
 8003e18:	08003dd9 	.word	0x08003dd9
 8003e1c:	08003f5d 	.word	0x08003f5d
 8003e20:	08003e87 	.word	0x08003e87
 8003e24:	08003f17 	.word	0x08003f17
 8003e28:	08003dd9 	.word	0x08003dd9
 8003e2c:	08003dd9 	.word	0x08003dd9
 8003e30:	08003f7f 	.word	0x08003f7f
 8003e34:	08003dd9 	.word	0x08003dd9
 8003e38:	08003e87 	.word	0x08003e87
 8003e3c:	08003dd9 	.word	0x08003dd9
 8003e40:	08003dd9 	.word	0x08003dd9
 8003e44:	08003f1f 	.word	0x08003f1f
 8003e48:	6833      	ldr	r3, [r6, #0]
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6032      	str	r2, [r6, #0]
 8003e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e09d      	b.n	8003f98 <_printf_i+0x1e8>
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	1d19      	adds	r1, r3, #4
 8003e62:	6031      	str	r1, [r6, #0]
 8003e64:	0606      	lsls	r6, r0, #24
 8003e66:	d501      	bpl.n	8003e6c <_printf_i+0xbc>
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	e003      	b.n	8003e74 <_printf_i+0xc4>
 8003e6c:	0645      	lsls	r5, r0, #25
 8003e6e:	d5fb      	bpl.n	8003e68 <_printf_i+0xb8>
 8003e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	da03      	bge.n	8003e80 <_printf_i+0xd0>
 8003e78:	232d      	movs	r3, #45	@ 0x2d
 8003e7a:	426d      	negs	r5, r5
 8003e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e80:	4859      	ldr	r0, [pc, #356]	@ (8003fe8 <_printf_i+0x238>)
 8003e82:	230a      	movs	r3, #10
 8003e84:	e011      	b.n	8003eaa <_printf_i+0xfa>
 8003e86:	6821      	ldr	r1, [r4, #0]
 8003e88:	6833      	ldr	r3, [r6, #0]
 8003e8a:	0608      	lsls	r0, r1, #24
 8003e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e90:	d402      	bmi.n	8003e98 <_printf_i+0xe8>
 8003e92:	0649      	lsls	r1, r1, #25
 8003e94:	bf48      	it	mi
 8003e96:	b2ad      	uxthmi	r5, r5
 8003e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e9a:	4853      	ldr	r0, [pc, #332]	@ (8003fe8 <_printf_i+0x238>)
 8003e9c:	6033      	str	r3, [r6, #0]
 8003e9e:	bf14      	ite	ne
 8003ea0:	230a      	movne	r3, #10
 8003ea2:	2308      	moveq	r3, #8
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eaa:	6866      	ldr	r6, [r4, #4]
 8003eac:	60a6      	str	r6, [r4, #8]
 8003eae:	2e00      	cmp	r6, #0
 8003eb0:	bfa2      	ittt	ge
 8003eb2:	6821      	ldrge	r1, [r4, #0]
 8003eb4:	f021 0104 	bicge.w	r1, r1, #4
 8003eb8:	6021      	strge	r1, [r4, #0]
 8003eba:	b90d      	cbnz	r5, 8003ec0 <_printf_i+0x110>
 8003ebc:	2e00      	cmp	r6, #0
 8003ebe:	d04b      	beq.n	8003f58 <_printf_i+0x1a8>
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8003eca:	5dc7      	ldrb	r7, [r0, r7]
 8003ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ed0:	462f      	mov	r7, r5
 8003ed2:	42bb      	cmp	r3, r7
 8003ed4:	460d      	mov	r5, r1
 8003ed6:	d9f4      	bls.n	8003ec2 <_printf_i+0x112>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d10b      	bne.n	8003ef4 <_printf_i+0x144>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	07df      	lsls	r7, r3, #31
 8003ee0:	d508      	bpl.n	8003ef4 <_printf_i+0x144>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	6861      	ldr	r1, [r4, #4]
 8003ee6:	4299      	cmp	r1, r3
 8003ee8:	bfde      	ittt	le
 8003eea:	2330      	movle	r3, #48	@ 0x30
 8003eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ef0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ef4:	1b92      	subs	r2, r2, r6
 8003ef6:	6122      	str	r2, [r4, #16]
 8003ef8:	f8cd a000 	str.w	sl, [sp]
 8003efc:	464b      	mov	r3, r9
 8003efe:	aa03      	add	r2, sp, #12
 8003f00:	4621      	mov	r1, r4
 8003f02:	4640      	mov	r0, r8
 8003f04:	f7ff fee6 	bl	8003cd4 <_printf_common>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d14a      	bne.n	8003fa2 <_printf_i+0x1f2>
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f10:	b004      	add	sp, #16
 8003f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	4833      	ldr	r0, [pc, #204]	@ (8003fec <_printf_i+0x23c>)
 8003f20:	2778      	movs	r7, #120	@ 0x78
 8003f22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	6831      	ldr	r1, [r6, #0]
 8003f2a:	061f      	lsls	r7, r3, #24
 8003f2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f30:	d402      	bmi.n	8003f38 <_printf_i+0x188>
 8003f32:	065f      	lsls	r7, r3, #25
 8003f34:	bf48      	it	mi
 8003f36:	b2ad      	uxthmi	r5, r5
 8003f38:	6031      	str	r1, [r6, #0]
 8003f3a:	07d9      	lsls	r1, r3, #31
 8003f3c:	bf44      	itt	mi
 8003f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003f42:	6023      	strmi	r3, [r4, #0]
 8003f44:	b11d      	cbz	r5, 8003f4e <_printf_i+0x19e>
 8003f46:	2310      	movs	r3, #16
 8003f48:	e7ac      	b.n	8003ea4 <_printf_i+0xf4>
 8003f4a:	4827      	ldr	r0, [pc, #156]	@ (8003fe8 <_printf_i+0x238>)
 8003f4c:	e7e9      	b.n	8003f22 <_printf_i+0x172>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f023 0320 	bic.w	r3, r3, #32
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	e7f6      	b.n	8003f46 <_printf_i+0x196>
 8003f58:	4616      	mov	r6, r2
 8003f5a:	e7bd      	b.n	8003ed8 <_printf_i+0x128>
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	6961      	ldr	r1, [r4, #20]
 8003f62:	1d18      	adds	r0, r3, #4
 8003f64:	6030      	str	r0, [r6, #0]
 8003f66:	062e      	lsls	r6, r5, #24
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	d501      	bpl.n	8003f70 <_printf_i+0x1c0>
 8003f6c:	6019      	str	r1, [r3, #0]
 8003f6e:	e002      	b.n	8003f76 <_printf_i+0x1c6>
 8003f70:	0668      	lsls	r0, r5, #25
 8003f72:	d5fb      	bpl.n	8003f6c <_printf_i+0x1bc>
 8003f74:	8019      	strh	r1, [r3, #0]
 8003f76:	2300      	movs	r3, #0
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	4616      	mov	r6, r2
 8003f7c:	e7bc      	b.n	8003ef8 <_printf_i+0x148>
 8003f7e:	6833      	ldr	r3, [r6, #0]
 8003f80:	1d1a      	adds	r2, r3, #4
 8003f82:	6032      	str	r2, [r6, #0]
 8003f84:	681e      	ldr	r6, [r3, #0]
 8003f86:	6862      	ldr	r2, [r4, #4]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7fc f960 	bl	8000250 <memchr>
 8003f90:	b108      	cbz	r0, 8003f96 <_printf_i+0x1e6>
 8003f92:	1b80      	subs	r0, r0, r6
 8003f94:	6060      	str	r0, [r4, #4]
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa0:	e7aa      	b.n	8003ef8 <_printf_i+0x148>
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4640      	mov	r0, r8
 8003faa:	47d0      	blx	sl
 8003fac:	3001      	adds	r0, #1
 8003fae:	d0ad      	beq.n	8003f0c <_printf_i+0x15c>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	079b      	lsls	r3, r3, #30
 8003fb4:	d413      	bmi.n	8003fde <_printf_i+0x22e>
 8003fb6:	68e0      	ldr	r0, [r4, #12]
 8003fb8:	9b03      	ldr	r3, [sp, #12]
 8003fba:	4298      	cmp	r0, r3
 8003fbc:	bfb8      	it	lt
 8003fbe:	4618      	movlt	r0, r3
 8003fc0:	e7a6      	b.n	8003f10 <_printf_i+0x160>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	4640      	mov	r0, r8
 8003fca:	47d0      	blx	sl
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d09d      	beq.n	8003f0c <_printf_i+0x15c>
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	9903      	ldr	r1, [sp, #12]
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dcf2      	bgt.n	8003fc2 <_printf_i+0x212>
 8003fdc:	e7eb      	b.n	8003fb6 <_printf_i+0x206>
 8003fde:	2500      	movs	r5, #0
 8003fe0:	f104 0619 	add.w	r6, r4, #25
 8003fe4:	e7f5      	b.n	8003fd2 <_printf_i+0x222>
 8003fe6:	bf00      	nop
 8003fe8:	080042f1 	.word	0x080042f1
 8003fec:	08004302 	.word	0x08004302

08003ff0 <memmove>:
 8003ff0:	4288      	cmp	r0, r1
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	eb01 0402 	add.w	r4, r1, r2
 8003ff8:	d902      	bls.n	8004000 <memmove+0x10>
 8003ffa:	4284      	cmp	r4, r0
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	d807      	bhi.n	8004010 <memmove+0x20>
 8004000:	1e43      	subs	r3, r0, #1
 8004002:	42a1      	cmp	r1, r4
 8004004:	d008      	beq.n	8004018 <memmove+0x28>
 8004006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800400a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800400e:	e7f8      	b.n	8004002 <memmove+0x12>
 8004010:	4402      	add	r2, r0
 8004012:	4601      	mov	r1, r0
 8004014:	428a      	cmp	r2, r1
 8004016:	d100      	bne.n	800401a <memmove+0x2a>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800401e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004022:	e7f7      	b.n	8004014 <memmove+0x24>

08004024 <_sbrk_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d06      	ldr	r5, [pc, #24]	@ (8004040 <_sbrk_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f000 f84c 	bl	80040cc <_sbrk>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_sbrk_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_sbrk_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200003ac 	.word	0x200003ac

08004044 <memcpy>:
 8004044:	440a      	add	r2, r1
 8004046:	4291      	cmp	r1, r2
 8004048:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800404c:	d100      	bne.n	8004050 <memcpy+0xc>
 800404e:	4770      	bx	lr
 8004050:	b510      	push	{r4, lr}
 8004052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800405a:	4291      	cmp	r1, r2
 800405c:	d1f9      	bne.n	8004052 <memcpy+0xe>
 800405e:	bd10      	pop	{r4, pc}

08004060 <_realloc_r>:
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	4680      	mov	r8, r0
 8004066:	4615      	mov	r5, r2
 8004068:	460c      	mov	r4, r1
 800406a:	b921      	cbnz	r1, 8004076 <_realloc_r+0x16>
 800406c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	4611      	mov	r1, r2
 8004072:	f7ff bc4b 	b.w	800390c <_malloc_r>
 8004076:	b92a      	cbnz	r2, 8004084 <_realloc_r+0x24>
 8004078:	f7ff fbdc 	bl	8003834 <_free_r>
 800407c:	2400      	movs	r4, #0
 800407e:	4620      	mov	r0, r4
 8004080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004084:	f000 f81a 	bl	80040bc <_malloc_usable_size_r>
 8004088:	4285      	cmp	r5, r0
 800408a:	4606      	mov	r6, r0
 800408c:	d802      	bhi.n	8004094 <_realloc_r+0x34>
 800408e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004092:	d8f4      	bhi.n	800407e <_realloc_r+0x1e>
 8004094:	4629      	mov	r1, r5
 8004096:	4640      	mov	r0, r8
 8004098:	f7ff fc38 	bl	800390c <_malloc_r>
 800409c:	4607      	mov	r7, r0
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0ec      	beq.n	800407c <_realloc_r+0x1c>
 80040a2:	42b5      	cmp	r5, r6
 80040a4:	462a      	mov	r2, r5
 80040a6:	4621      	mov	r1, r4
 80040a8:	bf28      	it	cs
 80040aa:	4632      	movcs	r2, r6
 80040ac:	f7ff ffca 	bl	8004044 <memcpy>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff fbbe 	bl	8003834 <_free_r>
 80040b8:	463c      	mov	r4, r7
 80040ba:	e7e0      	b.n	800407e <_realloc_r+0x1e>

080040bc <_malloc_usable_size_r>:
 80040bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c0:	1f18      	subs	r0, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfbc      	itt	lt
 80040c6:	580b      	ldrlt	r3, [r1, r0]
 80040c8:	18c0      	addlt	r0, r0, r3
 80040ca:	4770      	bx	lr

080040cc <_sbrk>:
 80040cc:	4a04      	ldr	r2, [pc, #16]	@ (80040e0 <_sbrk+0x14>)
 80040ce:	6811      	ldr	r1, [r2, #0]
 80040d0:	4603      	mov	r3, r0
 80040d2:	b909      	cbnz	r1, 80040d8 <_sbrk+0xc>
 80040d4:	4903      	ldr	r1, [pc, #12]	@ (80040e4 <_sbrk+0x18>)
 80040d6:	6011      	str	r1, [r2, #0]
 80040d8:	6810      	ldr	r0, [r2, #0]
 80040da:	4403      	add	r3, r0
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4770      	bx	lr
 80040e0:	200003bc 	.word	0x200003bc
 80040e4:	200003c0 	.word	0x200003c0

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
